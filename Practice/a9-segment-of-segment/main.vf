////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 08/22/2024 16:12:21
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Classes-2024/Digital System Fundamentals Shared/Practice/a9-segment-of-segment/main.vf" -w "D:/Classes-2024/Digital System Fundamentals Shared/Practice/a9-segment-of-segment/main.sch"
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_main (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_main (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_main(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module clkdiv20k_MUSER_main(CLK, 
                            CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_11;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_41;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_4" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_10 (.C(XLXN_41), 
                 .D(XLXN_11), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_11));
   (* HU_SET = "XLXI_14_5" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_6" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_7" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_41));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module ssd4drbp_MUSER_main(D0, 
                           D1, 
                           D2, 
                           D3, 
                           ScanCLK, 
                           COM, 
                           S);

    input [7:0] D0;
    input [7:0] D1;
    input [7:0] D2;
    input [7:0] D3;
    input ScanCLK;
   output [3:0] COM;
   output [7:0] S;
   
   wire XLXN_12;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_141;
   wire XLXN_145;
   wire XLXN_146;
   wire XLXN_236;
   wire XLXN_237;
   wire XLXN_238;
   wire XLXN_239;
   
   (* HU_SET = "XLXI_1_8" *) 
   M4_1E_HXILINX_main  XLXI_1 (.D0(D0[0]), 
                              .D1(D1[0]), 
                              .D2(D2[0]), 
                              .D3(D3[0]), 
                              .E(XLXN_12), 
                              .S0(XLXN_29), 
                              .S1(XLXN_28), 
                              .O(S[0]));
   (* HU_SET = "XLXI_3_9" *) 
   M4_1E_HXILINX_main  XLXI_3 (.D0(D0[1]), 
                              .D1(D1[1]), 
                              .D2(D2[1]), 
                              .D3(D3[1]), 
                              .E(XLXN_12), 
                              .S0(XLXN_29), 
                              .S1(XLXN_28), 
                              .O(S[1]));
   (* HU_SET = "XLXI_4_10" *) 
   M4_1E_HXILINX_main  XLXI_4 (.D0(D0[2]), 
                              .D1(D1[2]), 
                              .D2(D2[2]), 
                              .D3(D3[2]), 
                              .E(XLXN_12), 
                              .S0(XLXN_29), 
                              .S1(XLXN_28), 
                              .O(S[2]));
   (* HU_SET = "XLXI_5_11" *) 
   M4_1E_HXILINX_main  XLXI_5 (.D0(D0[3]), 
                              .D1(D1[3]), 
                              .D2(D2[3]), 
                              .D3(D3[3]), 
                              .E(XLXN_12), 
                              .S0(XLXN_29), 
                              .S1(XLXN_28), 
                              .O(S[3]));
   (* HU_SET = "XLXI_6_12" *) 
   M4_1E_HXILINX_main  XLXI_6 (.D0(D0[4]), 
                              .D1(D1[4]), 
                              .D2(D2[4]), 
                              .D3(D3[4]), 
                              .E(XLXN_12), 
                              .S0(XLXN_29), 
                              .S1(XLXN_28), 
                              .O(S[4]));
   (* HU_SET = "XLXI_7_13" *) 
   M4_1E_HXILINX_main  XLXI_7 (.D0(D0[5]), 
                              .D1(D1[5]), 
                              .D2(D2[5]), 
                              .D3(D3[5]), 
                              .E(XLXN_12), 
                              .S0(XLXN_29), 
                              .S1(XLXN_28), 
                              .O(S[5]));
   (* HU_SET = "XLXI_8_14" *) 
   M4_1E_HXILINX_main  XLXI_8 (.D0(D0[6]), 
                              .D1(D1[6]), 
                              .D2(D2[6]), 
                              .D3(D3[6]), 
                              .E(XLXN_12), 
                              .S0(XLXN_29), 
                              .S1(XLXN_28), 
                              .O(S[6]));
   (* HU_SET = "XLXI_9_15" *) 
   M4_1E_HXILINX_main  XLXI_9 (.D0(D0[7]), 
                              .D1(D1[7]), 
                              .D2(D2[7]), 
                              .D3(D3[7]), 
                              .E(XLXN_12), 
                              .S0(XLXN_29), 
                              .S1(XLXN_28), 
                              .O(S[7]));
   VCC  XLXI_18 (.P(XLXN_12));
   GND  XLXI_119 (.G(XLXN_141));
   (* HU_SET = "XLXI_162_16" *) 
   CB2CE_HXILINX_main  XLXI_162 (.C(ScanCLK), 
                                .CE(XLXN_145), 
                                .CLR(XLXN_141), 
                                .CEO(), 
                                .Q0(XLXN_29), 
                                .Q1(XLXN_28), 
                                .TC());
   VCC  XLXI_163 (.P(XLXN_145));
   VCC  XLXI_165 (.P(XLXN_146));
   (* HU_SET = "XLXI_210_17" *) 
   D2_4E_HXILINX_main  XLXI_210 (.A0(XLXN_29), 
                                .A1(XLXN_28), 
                                .E(XLXN_146), 
                                .D0(XLXN_236), 
                                .D1(XLXN_237), 
                                .D2(XLXN_238), 
                                .D3(XLXN_239));
   INV  XLXI_211 (.I(XLXN_236), 
                 .O(COM[0]));
   INV  XLXI_212 (.I(XLXN_237), 
                 .O(COM[1]));
   INV  XLXI_213 (.I(XLXN_238), 
                 .O(COM[2]));
   INV  XLXI_214 (.I(XLXN_239), 
                 .O(COM[3]));
endmodule
`timescale 1ns / 1ps

module ssd1d0f_MUSER_main(A0, 
                          A1, 
                          A2, 
                          A3, 
                          a, 
                          b, 
                          c, 
                          d, 
                          e, 
                          f, 
                          g);

    input A0;
    input A1;
    input A2;
    input A3;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   
   wire XLXN_26;
   wire XLXN_30;
   wire XLXN_35;
   wire XLXN_37;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_65;
   wire XLXN_67;
   wire XLXN_68;
   wire XLXN_71;
   wire XLXN_72;
   wire XLXN_74;
   wire XLXN_75;
   wire XLXN_77;
   wire XLXN_78;
   wire XLXN_79;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_84;
   wire XLXN_85;
   wire XLXN_86;
   wire XLXN_88;
   wire XLXN_90;
   wire XLXN_91;
   wire a_DUMMY;
   wire b_DUMMY;
   wire d_DUMMY;
   wire e_DUMMY;
   wire f_DUMMY;
   
   assign a = a_DUMMY;
   assign b = b_DUMMY;
   assign d = d_DUMMY;
   assign e = e_DUMMY;
   assign f = f_DUMMY;
   INV  XLXI_2 (.I(A3), 
               .O(XLXN_40));
   INV  XLXI_3 (.I(A2), 
               .O(XLXN_35));
   OR2  XLXI_4 (.I0(A2), 
               .I1(A1), 
               .O(XLXN_57));
   INV  XLXI_5 (.I(A0), 
               .O(XLXN_30));
   INV  XLXI_6 (.I(A1), 
               .O(XLXN_71));
   OR2  XLXI_7 (.I0(A3), 
               .I1(A0), 
               .O(XLXN_26));
   OR3  XLXI_50 (.I0(A2), 
                .I1(A0), 
                .I2(XLXN_40), 
                .O(XLXN_37));
   AND4  XLXI_51 (.I0(A0), 
                 .I1(A3), 
                 .I2(A1), 
                 .I3(XLXN_35), 
                 .O(XLXN_55));
   OR2  XLXI_52 (.I0(XLXN_57), 
                .I1(A0), 
                .O(XLXN_72));
   OR2  XLXI_53 (.I0(A1), 
                .I1(XLXN_30), 
                .O(XLXN_49));
   AND2  XLXI_54 (.I0(XLXN_57), 
                 .I1(A0), 
                 .O(XLXN_41));
   NAND2  XLXI_55 (.I0(A2), 
                  .I1(XLXN_26), 
                  .O(XLXN_43));
   NAND2  XLXI_56 (.I0(XLXN_57), 
                  .I1(A3), 
                  .O(XLXN_85));
   AND2  XLXI_57 (.I0(XLXN_30), 
                 .I1(A1), 
                 .O(XLXN_44));
   AND2  XLXI_58 (.I0(XLXN_35), 
                 .I1(XLXN_57), 
                 .O(XLXN_46));
   NAND2  XLXI_59 (.I0(XLXN_37), 
                  .I1(XLXN_30), 
                  .O(XLXN_47));
   NAND2  XLXI_60 (.I0(XLXN_35), 
                  .I1(XLXN_37), 
                  .O(XLXN_48));
   OR3  XLXI_61 (.I0(A3), 
                .I1(XLXN_35), 
                .I2(XLXN_49), 
                .O(XLXN_77));
   OR3  XLXI_62 (.I0(XLXN_49), 
                .I1(XLXN_35), 
                .I2(XLXN_40), 
                .O(XLXN_52));
   OR2  XLXI_63 (.I0(A3), 
                .I1(XLXN_41), 
                .O(XLXN_51));
   NAND2  XLXI_64 (.I0(XLXN_43), 
                  .I1(XLXN_57), 
                  .O(XLXN_78));
   OR2  XLXI_65 (.I0(A3), 
                .I1(XLXN_44), 
                .O(XLXN_54));
   OR2  XLXI_66 (.I0(A0), 
                .I1(XLXN_46), 
                .O(XLXN_68));
   NAND2  XLXI_67 (.I0(XLXN_57), 
                  .I1(XLXN_47), 
                  .O(XLXN_79));
   NAND2  XLXI_68 (.I0(XLXN_48), 
                  .I1(XLXN_49), 
                  .O(XLXN_56));
   NAND2  XLXI_69 (.I0(A3), 
                  .I1(XLXN_52), 
                  .O(XLXN_67));
   AND2  XLXI_70 (.I0(XLXN_51), 
                 .I1(XLXN_52), 
                 .O(XLXN_58));
   NAND2  XLXI_71 (.I0(XLXN_54), 
                  .I1(XLXN_49), 
                  .O(XLXN_59));
   OR2  XLXI_72 (.I0(A2), 
                .I1(XLXN_55), 
                .O(XLXN_62));
   NAND2  XLXI_73 (.I0(XLXN_57), 
                  .I1(XLXN_56), 
                  .O(XLXN_84));
   NOR2  XLXI_74 (.I0(A1), 
                 .I1(XLXN_58), 
                 .O(XLXN_61));
   NAND2  XLXI_75 (.I0(XLXN_77), 
                  .I1(XLXN_59), 
                  .O(XLXN_63));
   NAND2  XLXI_76 (.I0(XLXN_62), 
                  .I1(XLXN_63), 
                  .O(b_DUMMY));
   OR2  XLXI_77 (.I0(XLXN_61), 
                .I1(XLXN_55), 
                .O(XLXN_65));
   NAND3  XLXI_78 (.I0(XLXN_68), 
                  .I1(XLXN_67), 
                  .I2(b_DUMMY), 
                  .O(f_DUMMY));
   NAND2  XLXI_79 (.I0(b_DUMMY), 
                  .I1(A3), 
                  .O(XLXN_74));
   OR2  XLXI_80 (.I0(b_DUMMY), 
                .I1(XLXN_71), 
                .O(XLXN_75));
   NAND2  XLXI_81 (.I0(XLXN_72), 
                  .I1(XLXN_65), 
                  .O(a_DUMMY));
   NAND2  XLXI_82 (.I0(f_DUMMY), 
                  .I1(XLXN_40), 
                  .O(XLXN_90));
   AND4  XLXI_83 (.I0(XLXN_74), 
                 .I1(XLXN_75), 
                 .I2(XLXN_77), 
                 .I3(XLXN_78), 
                 .O(XLXN_82));
   NAND2  XLXI_84 (.I0(a_DUMMY), 
                  .I1(XLXN_79), 
                  .O(XLXN_83));
   NAND2  XLXI_85 (.I0(a_DUMMY), 
                  .I1(XLXN_30), 
                  .O(XLXN_86));
   INV  XLXI_86 (.I(XLXN_82), 
                .O(g));
   NAND2  XLXI_87 (.I0(XLXN_83), 
                  .I1(XLXN_84), 
                  .O(d_DUMMY));
   NAND2  XLXI_88 (.I0(XLXN_86), 
                  .I1(XLXN_85), 
                  .O(e_DUMMY));
   NAND2  XLXI_89 (.I0(A0), 
                  .I1(d_DUMMY), 
                  .O(XLXN_88));
   AND4  XLXI_90 (.I0(e_DUMMY), 
                 .I1(XLXN_88), 
                 .I2(XLXN_37), 
                 .I3(XLXN_90), 
                 .O(XLXN_91));
   INV  XLXI_91 (.I(XLXN_91), 
                .O(c));
endmodule
`timescale 1ns / 1ps

module main(OSC, 
            SW0, 
            SW1, 
            SW2, 
            SW3, 
            SSD_COM, 
            SSD_Segment);

    input OSC;
    input SW0;
    input SW1;
    input SW2;
    input SW3;
   output [3:0] SSD_COM;
   output [7:0] SSD_Segment;
   
   wire [7:0] DR;
   wire [7:0] D0;
   wire [7:0] D1;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_169;
   
   ssd1d0f_MUSER_main  XLXI_1 (.A0(XLXN_9), 
                              .A1(XLXN_8), 
                              .A2(XLXN_7), 
                              .A3(XLXN_6), 
                              .a(D0[0]), 
                              .b(D0[1]), 
                              .c(D0[2]), 
                              .d(D0[3]), 
                              .e(D1[4]), 
                              .f(D1[5]), 
                              .g(D1[6]));
   INV  XLXI_7 (.I(SW3), 
               .O(XLXN_6));
   INV  XLXI_8 (.I(SW2), 
               .O(XLXN_7));
   INV  XLXI_9 (.I(SW1), 
               .O(XLXN_8));
   INV  XLXI_10 (.I(SW0), 
                .O(XLXN_9));
   ssd4drbp_MUSER_main  XLXI_11 (.D0(D0[7:0]), 
                                .D1(D1[7:0]), 
                                .D2(DR[7:0]), 
                                .D3(DR[7:0]), 
                                .ScanCLK(XLXN_169), 
                                .COM(SSD_COM[3:0]), 
                                .S(SSD_Segment[7:0]));
   GND  XLXI_12 (.G(DR[0]));
   GND  XLXI_19 (.G(DR[1]));
   GND  XLXI_20 (.G(DR[2]));
   GND  XLXI_21 (.G(DR[3]));
   GND  XLXI_22 (.G(DR[4]));
   GND  XLXI_23 (.G(DR[5]));
   GND  XLXI_25 (.G(DR[6]));
   GND  XLXI_26 (.G(DR[7]));
   GND  XLXI_85 (.G(D0[7]));
   GND  XLXI_86 (.G(D0[6]));
   GND  XLXI_88 (.G(D0[5]));
   GND  XLXI_89 (.G(D0[4]));
   GND  XLXI_90 (.G(D1[0]));
   GND  XLXI_91 (.G(D1[1]));
   GND  XLXI_92 (.G(D1[2]));
   GND  XLXI_93 (.G(D1[3]));
   GND  XLXI_94 (.G(D1[7]));
   clkdiv20k_MUSER_main  XLXI_95 (.CLK(OSC), 
                                 .CLKO(XLXN_169));
endmodule
