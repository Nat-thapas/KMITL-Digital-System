////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 08/22/2024 15:39:39
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Classes-2024/Digital System Fundamentals Shared/Practice/a2-circles/main.vf" -w "D:/Classes-2024/Digital System Fundamentals Shared/Practice/a2-circles/main.sch"
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FJKCE_HXILINX_main(Q, C, CE, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(CE)
        begin
          if(!J)
          begin
            if(K)
            Q <= 1'b0;
          end
          else
          begin
            if(!K)
            Q <= 1'b1;
            else 
            Q <= !Q;
          end
        end
     end
   
endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module D3_8E_HXILINX_main (D0, D1, D2, D3, D4, D5, D6, D7, A0, A1, A2, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;

   input  A0;
   input  A1;
   input  A2;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;

      always @ (A0 or A1 or A2 or E)
      begin
         if(!E)
           {D7, D6, D5, D4, D3, D2, D1, D0} <= 8'b0000_0000;
        else
        begin
           case({A2,A1,A0})
             3'b000 :  {D7, D6, D5, D4, D3, D2, D1, D0} <=  8'b0000_0001;
             3'b001 :  {D7, D6, D5, D4, D3, D2, D1, D0} <=  8'b0000_0010;
             3'b010 :  {D7, D6, D5, D4, D3, D2, D1, D0} <=  8'b0000_0100;
             3'b011 :  {D7, D6, D5, D4, D3, D2, D1, D0} <=  8'b0000_1000;
             3'b100 :  {D7, D6, D5, D4, D3, D2, D1, D0} <=  8'b0001_0000;
             3'b101 :  {D7, D6, D5, D4, D3, D2, D1, D0} <=  8'b0010_0000;
             3'b110 :  {D7, D6, D5, D4, D3, D2, D1, D0} <=  8'b0100_0000;
             3'b111 :  {D7, D6, D5, D4, D3, D2, D1, D0} <=  8'b1000_0000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_main (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_main(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module clkdiv5_MUSER_main(CLK, 
                          CLKO);

    input CLK;
   output CLKO;
   
   wire XLXN_18;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_38;
   
   (* HU_SET = "XLXI_6_2" *) 
   FJKC_HXILINX_main  XLXI_6 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_29), 
                             .K(XLXN_28), 
                             .Q(XLXN_34));
   (* HU_SET = "XLXI_7_0" *) 
   FJKC_HXILINX_main  XLXI_7 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_35), 
                             .K(XLXN_36), 
                             .Q(XLXN_30));
   (* HU_SET = "XLXI_8_1" *) 
   FJKC_HXILINX_main  XLXI_8 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_30), 
                             .K(XLXN_34), 
                             .Q(XLXN_33));
   GND  XLXI_15 (.G(XLXN_18));
   VCC  XLXI_20 (.P(XLXN_28));
   INV  XLXI_21 (.I(XLXN_30), 
                .O(XLXN_29));
   AND2B1  XLXI_22 (.I0(XLXN_33), 
                   .I1(XLXN_34), 
                   .O(XLXN_35));
   VCC  XLXI_23 (.P(XLXN_36));
   FD_1 #( .INIT(1'b0) ) XLXI_24 (.C(CLK), 
                 .D(XLXN_33), 
                 .Q(XLXN_38));
   OR2  XLXI_25 (.I0(XLXN_38), 
                .I1(XLXN_33), 
                .O(CLKO));
endmodule
`timescale 1ns / 1ps

module clkdiv2M_MUSER_main(CLK, 
                           CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_9;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_44;
   wire XLXN_51;
   wire XLXN_53;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_3" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_10 (.C(XLXN_53), 
                 .D(XLXN_9), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_9));
   (* HU_SET = "XLXI_14_4" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_5" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_6" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_44), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_25_7" *) 
   CD4CE_HXILINX_main  XLXI_25 (.C(CLK_I), 
                               .CE(XLXN_44), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_51), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_28_8" *) 
   CD4CE_HXILINX_main  XLXI_28 (.C(CLK_I), 
                               .CE(XLXN_51), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_53));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module counter6x4c_MUSER_main(CE, 
                              CLK, 
                              CLR, 
                              CEO, 
                              Q0, 
                              Q1, 
                              Q2, 
                              Q3, 
                              TC);

    input CE;
    input CLK;
    input CLR;
   output CEO;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   output TC;
   
   wire XLXN_1;
   wire XLXN_6;
   wire XLXN_10;
   wire Q0_DUMMY;
   wire Q1_DUMMY;
   wire Q2_DUMMY;
   wire TC_DUMMY;
   
   assign Q0 = Q0_DUMMY;
   assign Q1 = Q1_DUMMY;
   assign Q2 = Q2_DUMMY;
   assign TC = TC_DUMMY;
   VCC  XLXI_4 (.P(XLXN_1));
   AND2B1  XLXI_5 (.I0(Q2_DUMMY), 
                  .I1(Q0_DUMMY), 
                  .O(XLXN_6));
   AND2  XLXI_6 (.I0(Q1_DUMMY), 
                .I1(Q0_DUMMY), 
                .O(XLXN_10));
   GND  XLXI_7 (.G(Q3));
   (* HU_SET = "XLXI_9_9" *) 
   FJKCE_HXILINX_main  XLXI_9 (.C(CLK), 
                              .CE(CE), 
                              .CLR(CLR), 
                              .J(XLXN_10), 
                              .K(Q0_DUMMY), 
                              .Q(Q2_DUMMY));
   (* HU_SET = "XLXI_10_11" *) 
   FJKCE_HXILINX_main  XLXI_10 (.C(CLK), 
                               .CE(CE), 
                               .CLR(CLR), 
                               .J(XLXN_1), 
                               .K(XLXN_1), 
                               .Q(Q0_DUMMY));
   (* HU_SET = "XLXI_11_10" *) 
   FJKCE_HXILINX_main  XLXI_11 (.C(CLK), 
                               .CE(CE), 
                               .CLR(CLR), 
                               .J(XLXN_6), 
                               .K(Q0_DUMMY), 
                               .Q(Q1_DUMMY));
   AND3B1  XLXI_13 (.I0(Q1_DUMMY), 
                   .I1(Q0_DUMMY), 
                   .I2(Q2_DUMMY), 
                   .O(TC_DUMMY));
   AND2  XLXI_14 (.I0(CE), 
                 .I1(TC_DUMMY), 
                 .O(CEO));
endmodule
`timescale 1ns / 1ps

module main(OSC, 
            SSD_a, 
            SSD_b, 
            SSD_c, 
            SSD_COM0, 
            SSD_COM1, 
            SSD_COM2, 
            SSD_COM3, 
            SSD_d, 
            SSD_e, 
            SSD_f);

    input OSC;
   output SSD_a;
   output SSD_b;
   output SSD_c;
   output SSD_COM0;
   output SSD_COM1;
   output SSD_COM2;
   output SSD_COM3;
   output SSD_d;
   output SSD_e;
   output SSD_f;
   
   wire XLXN_3;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_19;
   wire XLXN_22;
   wire XLXN_24;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_43;
   
   clkdiv2M_MUSER_main  XLXI_1 (.CLK(OSC), 
                               .CLKO(XLXN_3));
   clkdiv5_MUSER_main  XLXI_2 (.CLK(XLXN_3), 
                              .CLKO(XLXN_43));
   counter6x4c_MUSER_main  XLXI_3 (.CE(XLXN_5), 
                                  .CLK(XLXN_11), 
                                  .CLR(XLXN_10), 
                                  .CEO(XLXN_6), 
                                  .Q0(XLXN_19), 
                                  .Q1(XLXN_22), 
                                  .Q2(XLXN_24), 
                                  .Q3(), 
                                  .TC());
   (* HU_SET = "XLXI_4_12" *) 
   CB2CE_HXILINX_main  XLXI_4 (.C(XLXN_11), 
                              .CE(XLXN_6), 
                              .CLR(XLXN_10), 
                              .CEO(), 
                              .Q0(XLXN_14), 
                              .Q1(XLXN_15), 
                              .TC());
   VCC  XLXI_7 (.P(XLXN_5));
   GND  XLXI_8 (.G(XLXN_10));
   (* HU_SET = "XLXI_9_13" *) 
   D3_8E_HXILINX_main  XLXI_9 (.A0(XLXN_19), 
                              .A1(XLXN_22), 
                              .A2(XLXN_24), 
                              .E(XLXN_12), 
                              .D0(SSD_a), 
                              .D1(SSD_b), 
                              .D2(SSD_c), 
                              .D3(SSD_d), 
                              .D4(SSD_e), 
                              .D5(SSD_f), 
                              .D6(), 
                              .D7());
   (* HU_SET = "XLXI_10_14" *) 
   D2_4E_HXILINX_main  XLXI_10 (.A0(XLXN_14), 
                               .A1(XLXN_15), 
                               .E(XLXN_13), 
                               .D0(XLXN_35), 
                               .D1(XLXN_36), 
                               .D2(XLXN_37), 
                               .D3(XLXN_38));
   VCC  XLXI_11 (.P(XLXN_13));
   VCC  XLXI_12 (.P(XLXN_12));
   INV  XLXI_13 (.I(XLXN_35), 
                .O(SSD_COM0));
   INV  XLXI_14 (.I(XLXN_36), 
                .O(SSD_COM1));
   INV  XLXI_15 (.I(XLXN_37), 
                .O(SSD_COM2));
   INV  XLXI_16 (.I(XLXN_38), 
                .O(SSD_COM3));
   INV  XLXI_17 (.I(XLXN_43), 
                .O(XLXN_11));
endmodule
