////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 08/22/2024 15:54:18
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Classes-2024/Digital System Fundamentals Shared/Practice/a3-2xplus8/main.vf" -w "D:/Classes-2024/Digital System Fundamentals Shared/Practice/a3-2xplus8/main.sch"
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module ADD8_HXILINX_main (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_main (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 1ns / 1ps

module clkdiv20k_MUSER_main(CLK, 
                            CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_11;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_41;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_5" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_10 (.C(XLXN_41), 
                 .D(XLXN_11), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_11));
   (* HU_SET = "XLXI_14_6" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_7" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_8" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_41));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module ssd2d0fb_MUSER_main(D0, 
                           D1, 
                           ScanCLK, 
                           COM, 
                           Segment);

    input [3:0] D0;
    input [3:0] D1;
    input ScanCLK;
   output [1:0] COM;
   output [6:0] Segment;
   
   wire [3:0] DATA;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_65;
   wire XLXN_67;
   wire XLXN_68;
   wire XLXN_71;
   wire XLXN_72;
   wire XLXN_74;
   wire XLXN_75;
   wire XLXN_77;
   wire XLXN_78;
   wire XLXN_79;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_84;
   wire XLXN_85;
   wire XLXN_86;
   wire XLXN_88;
   wire XLXN_90;
   wire XLXN_91;
   wire XLXN_139;
   wire XLXN_141;
   wire [1:0] COM_DUMMY;
   wire [6:0] Segment_DUMMY;
   
   assign COM[1:0] = COM_DUMMY[1:0];
   assign Segment[6:0] = Segment_DUMMY[6:0];
   INV  XLXI_1 (.I(DATA[3]), 
               .O(XLXN_12));
   INV  XLXI_2 (.I(DATA[2]), 
               .O(XLXN_10));
   OR2  XLXI_3 (.I0(DATA[2]), 
               .I1(DATA[1]), 
               .O(XLXN_29));
   INV  XLXI_4 (.I(DATA[0]), 
               .O(XLXN_9));
   INV  XLXI_5 (.I(DATA[1]), 
               .O(XLXN_71));
   OR2  XLXI_6 (.I0(DATA[3]), 
               .I1(DATA[0]), 
               .O(XLXN_8));
   OR3  XLXI_50 (.I0(DATA[2]), 
                .I1(DATA[0]), 
                .I2(XLXN_12), 
                .O(XLXN_11));
   AND4  XLXI_51 (.I0(DATA[0]), 
                 .I1(DATA[3]), 
                 .I2(DATA[1]), 
                 .I3(XLXN_10), 
                 .O(XLXN_25));
   OR2  XLXI_52 (.I0(XLXN_29), 
                .I1(DATA[0]), 
                .O(XLXN_72));
   OR2  XLXI_53 (.I0(DATA[1]), 
                .I1(XLXN_9), 
                .O(XLXN_20));
   AND2  XLXI_54 (.I0(XLXN_29), 
                 .I1(DATA[0]), 
                 .O(XLXN_13));
   NAND2  XLXI_55 (.I0(DATA[2]), 
                  .I1(XLXN_8), 
                  .O(XLXN_14));
   NAND2  XLXI_56 (.I0(XLXN_29), 
                  .I1(DATA[3]), 
                  .O(XLXN_85));
   AND2  XLXI_57 (.I0(XLXN_9), 
                 .I1(DATA[1]), 
                 .O(XLXN_15));
   AND2  XLXI_58 (.I0(XLXN_10), 
                 .I1(XLXN_29), 
                 .O(XLXN_16));
   NAND2  XLXI_59 (.I0(XLXN_11), 
                  .I1(XLXN_9), 
                  .O(XLXN_17));
   NAND2  XLXI_60 (.I0(XLXN_10), 
                  .I1(XLXN_11), 
                  .O(XLXN_18));
   OR3  XLXI_61 (.I0(DATA[3]), 
                .I1(XLXN_10), 
                .I2(XLXN_20), 
                .O(XLXN_77));
   OR3  XLXI_62 (.I0(XLXN_20), 
                .I1(XLXN_10), 
                .I2(XLXN_12), 
                .O(XLXN_22));
   OR2  XLXI_63 (.I0(DATA[3]), 
                .I1(XLXN_13), 
                .O(XLXN_21));
   NAND2  XLXI_64 (.I0(XLXN_14), 
                  .I1(XLXN_29), 
                  .O(XLXN_78));
   OR2  XLXI_65 (.I0(DATA[3]), 
                .I1(XLXN_15), 
                .O(XLXN_23));
   OR2  XLXI_66 (.I0(DATA[0]), 
                .I1(XLXN_16), 
                .O(XLXN_68));
   NAND2  XLXI_67 (.I0(XLXN_29), 
                  .I1(XLXN_17), 
                  .O(XLXN_79));
   NAND2  XLXI_68 (.I0(XLXN_18), 
                  .I1(XLXN_20), 
                  .O(XLXN_26));
   NAND2  XLXI_69 (.I0(DATA[3]), 
                  .I1(XLXN_22), 
                  .O(XLXN_67));
   AND2  XLXI_70 (.I0(XLXN_21), 
                 .I1(XLXN_22), 
                 .O(XLXN_30));
   NAND2  XLXI_71 (.I0(XLXN_23), 
                  .I1(XLXN_20), 
                  .O(XLXN_31));
   OR2  XLXI_72 (.I0(DATA[2]), 
                .I1(XLXN_25), 
                .O(XLXN_33));
   NAND2  XLXI_73 (.I0(XLXN_29), 
                  .I1(XLXN_26), 
                  .O(XLXN_84));
   NOR2  XLXI_74 (.I0(DATA[1]), 
                 .I1(XLXN_30), 
                 .O(XLXN_32));
   NAND2  XLXI_75 (.I0(XLXN_77), 
                  .I1(XLXN_31), 
                  .O(XLXN_34));
   NAND2  XLXI_76 (.I0(XLXN_33), 
                  .I1(XLXN_34), 
                  .O(Segment_DUMMY[1]));
   OR2  XLXI_77 (.I0(XLXN_32), 
                .I1(XLXN_25), 
                .O(XLXN_65));
   NAND3  XLXI_78 (.I0(XLXN_68), 
                  .I1(XLXN_67), 
                  .I2(Segment_DUMMY[1]), 
                  .O(Segment_DUMMY[5]));
   NAND2  XLXI_79 (.I0(Segment_DUMMY[1]), 
                  .I1(DATA[3]), 
                  .O(XLXN_74));
   OR2  XLXI_80 (.I0(Segment_DUMMY[1]), 
                .I1(XLXN_71), 
                .O(XLXN_75));
   NAND2  XLXI_81 (.I0(XLXN_72), 
                  .I1(XLXN_65), 
                  .O(Segment_DUMMY[0]));
   NAND2  XLXI_82 (.I0(Segment_DUMMY[5]), 
                  .I1(XLXN_12), 
                  .O(XLXN_90));
   AND4  XLXI_83 (.I0(XLXN_74), 
                 .I1(XLXN_75), 
                 .I2(XLXN_77), 
                 .I3(XLXN_78), 
                 .O(XLXN_82));
   NAND2  XLXI_84 (.I0(Segment_DUMMY[0]), 
                  .I1(XLXN_79), 
                  .O(XLXN_83));
   NAND2  XLXI_85 (.I0(Segment_DUMMY[0]), 
                  .I1(XLXN_9), 
                  .O(XLXN_86));
   INV  XLXI_86 (.I(XLXN_82), 
                .O(Segment_DUMMY[6]));
   NAND2  XLXI_87 (.I0(XLXN_83), 
                  .I1(XLXN_84), 
                  .O(Segment_DUMMY[3]));
   NAND2  XLXI_88 (.I0(XLXN_86), 
                  .I1(XLXN_85), 
                  .O(Segment_DUMMY[4]));
   NAND2  XLXI_89 (.I0(DATA[0]), 
                  .I1(Segment_DUMMY[3]), 
                  .O(XLXN_88));
   AND4  XLXI_90 (.I0(Segment_DUMMY[4]), 
                 .I1(XLXN_88), 
                 .I2(XLXN_11), 
                 .I3(XLXN_90), 
                 .O(XLXN_91));
   INV  XLXI_91 (.I(XLXN_91), 
                .O(Segment_DUMMY[2]));
   (* HU_SET = "XLXI_117_13" *) 
   FJKC_HXILINX_main  XLXI_117 (.C(ScanCLK), 
                               .CLR(XLXN_141), 
                               .J(XLXN_139), 
                               .K(XLXN_139), 
                               .Q(COM_DUMMY[0]));
   VCC  XLXI_118 (.P(XLXN_139));
   GND  XLXI_119 (.G(XLXN_141));
   INV  XLXI_156 (.I(COM_DUMMY[0]), 
                 .O(COM_DUMMY[1]));
   (* HU_SET = "XLXI_158_9" *) 
   M2_1_HXILINX_main  XLXI_158 (.D0(D0[0]), 
                               .D1(D1[0]), 
                               .S0(COM_DUMMY[0]), 
                               .O(DATA[0]));
   (* HU_SET = "XLXI_159_10" *) 
   M2_1_HXILINX_main  XLXI_159 (.D0(D0[1]), 
                               .D1(D1[1]), 
                               .S0(COM_DUMMY[0]), 
                               .O(DATA[1]));
   (* HU_SET = "XLXI_160_11" *) 
   M2_1_HXILINX_main  XLXI_160 (.D0(D0[2]), 
                               .D1(D1[2]), 
                               .S0(COM_DUMMY[0]), 
                               .O(DATA[2]));
   (* HU_SET = "XLXI_161_12" *) 
   M2_1_HXILINX_main  XLXI_161 (.D0(D0[3]), 
                               .D1(D1[3]), 
                               .S0(COM_DUMMY[0]), 
                               .O(DATA[3]));
endmodule
`timescale 1ns / 1ps

module main(OSC, 
            SW0, 
            SW1, 
            SW2, 
            SW3, 
            SW4, 
            SSD_COM, 
            SSD_Segment);

    input OSC;
    input SW0;
    input SW1;
    input SW2;
    input SW3;
    input SW4;
   output [1:0] SSD_COM;
   output [6:0] SSD_Segment;
   
   wire [7:0] A;
   wire [7:0] B;
   wire [3:0] D0;
   wire [3:0] D1;
   wire [7:0] S;
   wire XLXN_1;
   wire XLXN_149;
   
   (* HU_SET = "XLXI_1_14" *) 
   ADD8_HXILINX_main  XLXI_1 (.A(A[7:0]), 
                             .B(B[7:0]), 
                             .CI(XLXN_1), 
                             .CO(), 
                             .OFL(), 
                             .S(S[7:0]));
   GND  XLXI_2 (.G(XLXN_1));
   VCC  XLXI_5 (.P(B[3]));
   GND  XLXI_6 (.G(B[0]));
   GND  XLXI_7 (.G(B[1]));
   GND  XLXI_8 (.G(B[2]));
   GND  XLXI_10 (.G(B[4]));
   GND  XLXI_11 (.G(B[5]));
   GND  XLXI_12 (.G(B[6]));
   GND  XLXI_13 (.G(B[7]));
   BUF  XLXI_55 (.I(SW0), 
                .O(A[1]));
   BUF  XLXI_56 (.I(SW1), 
                .O(A[2]));
   BUF  XLXI_57 (.I(SW2), 
                .O(A[3]));
   BUF  XLXI_58 (.I(SW3), 
                .O(A[4]));
   BUF  XLXI_59 (.I(SW4), 
                .O(A[5]));
   GND  XLXI_60 (.G(A[6]));
   GND  XLXI_61 (.G(A[7]));
   GND  XLXI_62 (.G(A[0]));
   ssd2d0fb_MUSER_main  XLXI_81 (.D0(D0[3:0]), 
                                .D1(D1[3:0]), 
                                .ScanCLK(XLXN_149), 
                                .COM(SSD_COM[1:0]), 
                                .Segment(SSD_Segment[6:0]));
   BUF  XLXI_83 (.I(S[0]), 
                .O(D0[0]));
   BUF  XLXI_84 (.I(S[1]), 
                .O(D0[1]));
   BUF  XLXI_85 (.I(S[2]), 
                .O(D0[2]));
   BUF  XLXI_86 (.I(S[3]), 
                .O(D0[3]));
   BUF  XLXI_87 (.I(S[4]), 
                .O(D1[0]));
   BUF  XLXI_88 (.I(S[5]), 
                .O(D1[1]));
   BUF  XLXI_90 (.I(S[6]), 
                .O(D1[2]));
   BUF  XLXI_92 (.I(S[7]), 
                .O(D1[3]));
   clkdiv20k_MUSER_main  XLXI_101 (.CLK(OSC), 
                                  .CLKO(XLXN_149));
endmodule
