////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ssd4d0fb.vf
// /___/   /\     Timestamp : 08/22/2024 15:20:16
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Classes-2024/Digital System Fundamentals Shared/Practice/a1-power-of-two/ssd4d0fb.vf" -w "D:/Classes-2024/Digital System Fundamentals Shared/Practice/a1-power-of-two/ssd4d0fb.sch"
//Design Name: ssd4d0fb
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_ssd4d0fb (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_ssd4d0fb (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_ssd4d0fb(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module ssd4d0fb(D0, 
                D1, 
                D2, 
                D3, 
                ScanCLK, 
                COM, 
                Segment);

    input [3:0] D0;
    input [3:0] D1;
    input [3:0] D2;
    input [3:0] D3;
    input ScanCLK;
   output [3:0] COM;
   output [6:0] Segment;
   
   wire [3:0] DATA;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_36;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_65;
   wire XLXN_79;
   wire XLXN_84;
   wire XLXN_85;
   wire XLXN_86;
   wire XLXN_88;
   wire XLXN_90;
   wire XLXN_91;
   wire XLXN_141;
   wire XLXN_146;
   wire XLXN_152;
   wire XLXN_185;
   wire XLXN_195;
   wire XLXN_199;
   wire XLXN_236;
   wire XLXN_237;
   wire XLXN_238;
   wire XLXN_239;
   wire [6:0] Segment_DUMMY;
   
   assign Segment[6:0] = Segment_DUMMY[6:0];
   INV  XLXI_1 (.I(DATA[3]), 
               .O(XLXN_12));
   INV  XLXI_2 (.I(DATA[2]), 
               .O(XLXN_10));
   OR2  XLXI_3 (.I0(DATA[2]), 
               .I1(DATA[1]), 
               .O(XLXN_29));
   INV  XLXI_4 (.I(DATA[0]), 
               .O(XLXN_9));
   INV  XLXI_5 (.I(DATA[1]), 
               .O(XLXN_39));
   OR2  XLXI_6 (.I0(DATA[3]), 
               .I1(DATA[0]), 
               .O(XLXN_8));
   AND4  XLXI_7 (.I0(DATA[0]), 
                .I1(DATA[3]), 
                .I2(DATA[1]), 
                .I3(XLXN_10), 
                .O(XLXN_25));
   OR2  XLXI_8 (.I0(XLXN_29), 
               .I1(DATA[0]), 
               .O(XLXN_42));
   OR2  XLXI_9 (.I0(DATA[1]), 
               .I1(XLXN_9), 
               .O(XLXN_20));
   AND2  XLXI_10 (.I0(XLXN_29), 
                 .I1(DATA[0]), 
                 .O(XLXN_13));
   NAND2  XLXI_11 (.I0(DATA[2]), 
                  .I1(XLXN_8), 
                  .O(XLXN_14));
   NAND2  XLXI_13 (.I0(XLXN_29), 
                  .I1(DATA[3]), 
                  .O(XLXN_85));
   OR3  XLXI_15 (.I0(DATA[2]), 
                .I1(DATA[0]), 
                .I2(XLXN_12), 
                .O(XLXN_11));
   AND2  XLXI_57 (.I0(XLXN_9), 
                 .I1(DATA[1]), 
                 .O(XLXN_15));
   AND2  XLXI_58 (.I0(XLXN_10), 
                 .I1(XLXN_29), 
                 .O(XLXN_16));
   NAND2  XLXI_59 (.I0(XLXN_11), 
                  .I1(XLXN_9), 
                  .O(XLXN_17));
   NAND2  XLXI_60 (.I0(XLXN_10), 
                  .I1(XLXN_11), 
                  .O(XLXN_18));
   OR3  XLXI_61 (.I0(DATA[3]), 
                .I1(XLXN_10), 
                .I2(XLXN_20), 
                .O(XLXN_44));
   OR3  XLXI_62 (.I0(XLXN_20), 
                .I1(XLXN_10), 
                .I2(XLXN_12), 
                .O(XLXN_22));
   OR2  XLXI_63 (.I0(DATA[3]), 
                .I1(XLXN_13), 
                .O(XLXN_21));
   NAND2  XLXI_64 (.I0(XLXN_14), 
                  .I1(XLXN_29), 
                  .O(XLXN_45));
   OR2  XLXI_65 (.I0(DATA[3]), 
                .I1(XLXN_15), 
                .O(XLXN_23));
   OR2  XLXI_66 (.I0(DATA[0]), 
                .I1(XLXN_16), 
                .O(XLXN_38));
   NAND2  XLXI_67 (.I0(XLXN_29), 
                  .I1(XLXN_17), 
                  .O(XLXN_79));
   NAND2  XLXI_68 (.I0(XLXN_18), 
                  .I1(XLXN_20), 
                  .O(XLXN_26));
   NAND2  XLXI_69 (.I0(DATA[3]), 
                  .I1(XLXN_22), 
                  .O(XLXN_36));
   AND2  XLXI_70 (.I0(XLXN_21), 
                 .I1(XLXN_22), 
                 .O(XLXN_30));
   NAND2  XLXI_71 (.I0(XLXN_23), 
                  .I1(XLXN_20), 
                  .O(XLXN_31));
   OR2  XLXI_72 (.I0(DATA[2]), 
                .I1(XLXN_25), 
                .O(XLXN_33));
   NAND2  XLXI_73 (.I0(XLXN_29), 
                  .I1(XLXN_26), 
                  .O(XLXN_84));
   NOR2  XLXI_74 (.I0(DATA[1]), 
                 .I1(XLXN_30), 
                 .O(XLXN_32));
   NAND2  XLXI_75 (.I0(XLXN_44), 
                  .I1(XLXN_31), 
                  .O(XLXN_34));
   NAND2  XLXI_76 (.I0(XLXN_33), 
                  .I1(XLXN_34), 
                  .O(Segment_DUMMY[1]));
   OR2  XLXI_77 (.I0(XLXN_32), 
                .I1(XLXN_25), 
                .O(XLXN_65));
   NAND3  XLXI_78 (.I0(XLXN_38), 
                  .I1(XLXN_36), 
                  .I2(Segment_DUMMY[1]), 
                  .O(Segment_DUMMY[5]));
   NAND2  XLXI_79 (.I0(Segment_DUMMY[1]), 
                  .I1(DATA[3]), 
                  .O(XLXN_40));
   OR2  XLXI_80 (.I0(Segment_DUMMY[1]), 
                .I1(XLXN_39), 
                .O(XLXN_41));
   NAND2  XLXI_81 (.I0(XLXN_42), 
                  .I1(XLXN_65), 
                  .O(Segment_DUMMY[0]));
   NAND2  XLXI_82 (.I0(Segment_DUMMY[5]), 
                  .I1(XLXN_12), 
                  .O(XLXN_90));
   AND4  XLXI_83 (.I0(XLXN_40), 
                 .I1(XLXN_41), 
                 .I2(XLXN_44), 
                 .I3(XLXN_45), 
                 .O(XLXN_47));
   NAND2  XLXI_84 (.I0(Segment_DUMMY[0]), 
                  .I1(XLXN_79), 
                  .O(XLXN_48));
   NAND2  XLXI_85 (.I0(Segment_DUMMY[0]), 
                  .I1(XLXN_9), 
                  .O(XLXN_86));
   INV  XLXI_86 (.I(XLXN_47), 
                .O(Segment_DUMMY[6]));
   NAND2  XLXI_87 (.I0(XLXN_48), 
                  .I1(XLXN_84), 
                  .O(Segment_DUMMY[3]));
   NAND2  XLXI_88 (.I0(XLXN_86), 
                  .I1(XLXN_85), 
                  .O(Segment_DUMMY[4]));
   NAND2  XLXI_89 (.I0(DATA[0]), 
                  .I1(Segment_DUMMY[3]), 
                  .O(XLXN_88));
   AND4  XLXI_90 (.I0(Segment_DUMMY[4]), 
                 .I1(XLXN_88), 
                 .I2(XLXN_11), 
                 .I3(XLXN_90), 
                 .O(XLXN_91));
   INV  XLXI_91 (.I(XLXN_91), 
                .O(Segment_DUMMY[2]));
   GND  XLXI_119 (.G(XLXN_141));
   (* HU_SET = "XLXI_162_4" *) 
   CB2CE_HXILINX_ssd4d0fb  XLXI_162 (.C(ScanCLK), 
                                    .CE(XLXN_146), 
                                    .CLR(XLXN_141), 
                                    .CEO(), 
                                    .Q0(XLXN_195), 
                                    .Q1(XLXN_199), 
                                    .TC());
   VCC  XLXI_163 (.P(XLXN_146));
   VCC  XLXI_165 (.P(XLXN_152));
   (* HU_SET = "XLXI_183_0" *) 
   M4_1E_HXILINX_ssd4d0fb  XLXI_183 (.D0(D0[0]), 
                                    .D1(D1[0]), 
                                    .D2(D2[0]), 
                                    .D3(D3[0]), 
                                    .E(XLXN_185), 
                                    .S0(XLXN_195), 
                                    .S1(XLXN_199), 
                                    .O(DATA[0]));
   (* HU_SET = "XLXI_184_1" *) 
   M4_1E_HXILINX_ssd4d0fb  XLXI_184 (.D0(D0[1]), 
                                    .D1(D1[1]), 
                                    .D2(D2[1]), 
                                    .D3(D3[1]), 
                                    .E(XLXN_185), 
                                    .S0(XLXN_195), 
                                    .S1(XLXN_199), 
                                    .O(DATA[1]));
   (* HU_SET = "XLXI_185_2" *) 
   M4_1E_HXILINX_ssd4d0fb  XLXI_185 (.D0(D0[2]), 
                                    .D1(D1[2]), 
                                    .D2(D2[2]), 
                                    .D3(D3[2]), 
                                    .E(XLXN_185), 
                                    .S0(XLXN_195), 
                                    .S1(XLXN_199), 
                                    .O(DATA[2]));
   (* HU_SET = "XLXI_186_3" *) 
   M4_1E_HXILINX_ssd4d0fb  XLXI_186 (.D0(D0[3]), 
                                    .D1(D1[3]), 
                                    .D2(D2[3]), 
                                    .D3(D3[3]), 
                                    .E(XLXN_185), 
                                    .S0(XLXN_195), 
                                    .S1(XLXN_199), 
                                    .O(DATA[3]));
   VCC  XLXI_204 (.P(XLXN_185));
   (* HU_SET = "XLXI_210_5" *) 
   D2_4E_HXILINX_ssd4d0fb  XLXI_210 (.A0(XLXN_195), 
                                    .A1(XLXN_199), 
                                    .E(XLXN_152), 
                                    .D0(XLXN_236), 
                                    .D1(XLXN_237), 
                                    .D2(XLXN_238), 
                                    .D3(XLXN_239));
   INV  XLXI_211 (.I(XLXN_236), 
                 .O(COM[0]));
   INV  XLXI_212 (.I(XLXN_237), 
                 .O(COM[1]));
   INV  XLXI_213 (.I(XLXN_238), 
                 .O(COM[2]));
   INV  XLXI_214 (.I(XLXN_239), 
                 .O(COM[3]));
endmodule
