////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 10/15/2024 14:04:31
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Classes-2024/Digital System Fundamentals Shared/Exam/b04-counter-step-3/main.vf" -w "D:/Classes-2024/Digital System Fundamentals Shared/Exam/b04-counter-step-3/main.sch"
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_main (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 1ns / 1ps

module clkdiv20k_MUSER_main(CLK, 
                            CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_11;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_41;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_0" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_10 (.C(XLXN_41), 
                 .D(XLXN_11), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_11));
   (* HU_SET = "XLXI_14_1" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_2" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_3" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_41));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module clkdiv2_MUSER_main(CLK, 
                          CLKO);

    input CLK;
   output CLKO;
   
   wire XLXN_27;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   FD_1 #( .INIT(1'b0) ) XLXI_17 (.C(CLK), 
                 .D(XLXN_27), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_18 (.I(CLKO_DUMMY), 
                .O(XLXN_27));
endmodule
`timescale 1ns / 1ps

module clkdiv20M_MUSER_main(CLK, 
                            CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_9;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_44;
   wire XLXN_51;
   wire XLXN_56;
   wire XLXN_58;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_4" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_9 (.C(XLXN_58), 
                .D(XLXN_9), 
                .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_9));
   (* HU_SET = "XLXI_14_5" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_6" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_7" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_44), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_25_8" *) 
   CD4CE_HXILINX_main  XLXI_25 (.C(CLK_I), 
                               .CE(XLXN_44), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_51), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_28_9" *) 
   CD4CE_HXILINX_main  XLXI_28 (.C(CLK_I), 
                               .CE(XLXN_51), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_56), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_31_10" *) 
   CD4CE_HXILINX_main  XLXI_31 (.C(CLK_I), 
                               .CE(XLXN_56), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_58));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module ssd2d09b_MUSER_main(D0, 
                           D1, 
                           ScanCLK, 
                           COM, 
                           Segment);

    input [3:0] D0;
    input [3:0] D1;
    input ScanCLK;
   output [1:0] COM;
   output [6:0] Segment;
   
   wire [3:0] D;
   wire XLXN_109;
   wire XLXN_111;
   wire XLXN_113;
   wire XLXN_114;
   wire XLXN_117;
   wire XLXN_118;
   wire XLXN_119;
   wire XLXN_125;
   wire XLXN_129;
   wire XLXN_130;
   wire XLXN_131;
   wire XLXN_132;
   wire XLXN_134;
   wire XLXN_135;
   wire XLXN_139;
   wire XLXN_141;
   wire [1:0] COM_DUMMY;
   wire [6:0] Segment_DUMMY;
   
   assign COM[1:0] = COM_DUMMY[1:0];
   assign Segment[6:0] = Segment_DUMMY[6:0];
   AND2  XLXI_92 (.I0(D[0]), 
                 .I1(D[1]), 
                 .O(XLXN_129));
   INV  XLXI_93 (.I(D[1]), 
                .O(XLXN_109));
   INV  XLXI_94 (.I(D[0]), 
                .O(XLXN_111));
   OR2  XLXI_95 (.I0(D[0]), 
                .I1(D[1]), 
                .O(XLXN_118));
   NOR2  XLXI_96 (.I0(D[2]), 
                 .I1(XLXN_109), 
                 .O(XLXN_113));
   AND2  XLXI_97 (.I0(XLXN_109), 
                 .I1(D[2]), 
                 .O(XLXN_114));
   AND2  XLXI_98 (.I0(D[2]), 
                 .I1(XLXN_111), 
                 .O(XLXN_135));
   NOR2  XLXI_99 (.I0(D[0]), 
                 .I1(XLXN_113), 
                 .O(XLXN_131));
   OR2  XLXI_100 (.I0(D[0]), 
                 .I1(XLXN_114), 
                 .O(XLXN_117));
   INV  XLXI_101 (.I(XLXN_117), 
                 .O(Segment_DUMMY[4]));
   NAND2  XLXI_102 (.I0(XLXN_117), 
                   .I1(D[1]), 
                   .O(XLXN_119));
   NAND3  XLXI_103 (.I0(XLXN_118), 
                   .I1(XLXN_119), 
                   .I2(D[2]), 
                   .O(Segment_DUMMY[1]));
   NAND3  XLXI_104 (.I0(Segment_DUMMY[1]), 
                   .I1(D[1]), 
                   .I2(Segment_DUMMY[4]), 
                   .O(Segment_DUMMY[2]));
   NOR2  XLXI_105 (.I0(XLXN_111), 
                  .I1(Segment_DUMMY[1]), 
                  .O(XLXN_125));
   OR2  XLXI_106 (.I0(XLXN_125), 
                 .I1(D[3]), 
                 .O(XLXN_130));
   OR2  XLXI_107 (.I0(XLXN_113), 
                 .I1(XLXN_130), 
                 .O(XLXN_134));
   NOR2  XLXI_108 (.I0(XLXN_129), 
                  .I1(XLXN_130), 
                  .O(XLXN_132));
   OR2  XLXI_109 (.I0(XLXN_135), 
                 .I1(XLXN_134), 
                 .O(Segment_DUMMY[6]));
   OR2  XLXI_110 (.I0(Segment_DUMMY[4]), 
                 .I1(XLXN_134), 
                 .O(Segment_DUMMY[3]));
   NAND2  XLXI_111 (.I0(XLXN_132), 
                   .I1(XLXN_117), 
                   .O(Segment_DUMMY[0]));
   OR2  XLXI_112 (.I0(XLXN_131), 
                 .I1(XLXN_130), 
                 .O(Segment_DUMMY[5]));
   (* HU_SET = "XLXI_117_15" *) 
   FJKC_HXILINX_main  XLXI_117 (.C(ScanCLK), 
                               .CLR(XLXN_141), 
                               .J(XLXN_139), 
                               .K(XLXN_139), 
                               .Q(COM_DUMMY[0]));
   VCC  XLXI_118 (.P(XLXN_139));
   GND  XLXI_119 (.G(XLXN_141));
   INV  XLXI_156 (.I(COM_DUMMY[0]), 
                 .O(COM_DUMMY[1]));
   (* HU_SET = "XLXI_158_11" *) 
   M2_1_HXILINX_main  XLXI_158 (.D0(D0[0]), 
                               .D1(D1[0]), 
                               .S0(COM_DUMMY[0]), 
                               .O(D[0]));
   (* HU_SET = "XLXI_159_12" *) 
   M2_1_HXILINX_main  XLXI_159 (.D0(D0[1]), 
                               .D1(D1[1]), 
                               .S0(COM_DUMMY[0]), 
                               .O(D[1]));
   (* HU_SET = "XLXI_160_13" *) 
   M2_1_HXILINX_main  XLXI_160 (.D0(D0[2]), 
                               .D1(D1[2]), 
                               .S0(COM_DUMMY[0]), 
                               .O(D[2]));
   (* HU_SET = "XLXI_161_14" *) 
   M2_1_HXILINX_main  XLXI_161 (.D0(D0[3]), 
                               .D1(D1[3]), 
                               .S0(COM_DUMMY[0]), 
                               .O(D[3]));
endmodule
`timescale 1ns / 1ps

module dabble_MUSER_main(D0, 
                         D1, 
                         D2, 
                         D3, 
                         Q0, 
                         Q1, 
                         Q2, 
                         Q3);

    input D0;
    input D1;
    input D2;
    input D3;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_19;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_30;
   wire Q0_DUMMY;
   
   assign Q0 = Q0_DUMMY;
   INV  XLXI_1 (.I(D2), 
               .O(XLXN_13));
   NOR2  XLXI_2 (.I0(D3), 
                .I1(D2), 
                .O(XLXN_25));
   AND2  XLXI_3 (.I0(D2), 
                .I1(D1), 
                .O(XLXN_15));
   INV  XLXI_4 (.I(D0), 
               .O(XLXN_14));
   NOR2  XLXI_25 (.I0(XLXN_13), 
                 .I1(D1), 
                 .O(XLXN_19));
   NAND2  XLXI_26 (.I0(XLXN_14), 
                  .I1(D2), 
                  .O(XLXN_23));
   OR2  XLXI_27 (.I0(XLXN_15), 
                .I1(D3), 
                .O(XLXN_24));
   NAND2  XLXI_28 (.I0(D3), 
                  .I1(XLXN_14), 
                  .O(XLXN_26));
   (* HU_SET = "XLXI_37_16" *) 
   M2_1_HXILINX_main  XLXI_37 (.D0(XLXN_19), 
                              .D1(D3), 
                              .S0(D0), 
                              .O(Q1));
   NAND2  XLXI_38 (.I0(XLXN_23), 
                  .I1(D1), 
                  .O(XLXN_27));
   (* HU_SET = "XLXI_39_17" *) 
   M2_1_HXILINX_main  XLXI_39 (.D0(XLXN_24), 
                              .D1(XLXN_25), 
                              .S0(D0), 
                              .O(Q0_DUMMY));
   INV  XLXI_40 (.I(Q0_DUMMY), 
                .O(XLXN_30));
   NAND2  XLXI_41 (.I0(XLXN_26), 
                  .I1(XLXN_27), 
                  .O(Q2));
   (* HU_SET = "XLXI_42_18" *) 
   M2_1_HXILINX_main  XLXI_42 (.D0(Q0_DUMMY), 
                              .D1(XLXN_30), 
                              .S0(D0), 
                              .O(Q3));
endmodule
`timescale 1ns / 1ps

module dd8b_MUSER_main(B, 
                       H, 
                       O, 
                       T);

    input [7:0] B;
   output [3:0] H;
   output [3:0] O;
   output [3:0] T;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   
   dabble_MUSER_main  XLXI_1 (.D0(B[5]), 
                             .D1(B[6]), 
                             .D2(B[7]), 
                             .D3(XLXN_23), 
                             .Q0(XLXN_2), 
                             .Q1(XLXN_4), 
                             .Q2(XLXN_3), 
                             .Q3(XLXN_14));
   dabble_MUSER_main  XLXI_2 (.D0(B[4]), 
                             .D1(XLXN_2), 
                             .D2(XLXN_3), 
                             .D3(XLXN_4), 
                             .Q0(XLXN_7), 
                             .Q1(XLXN_5), 
                             .Q2(XLXN_6), 
                             .Q3(XLXN_13));
   dabble_MUSER_main  XLXI_3 (.D0(B[3]), 
                             .D1(XLXN_7), 
                             .D2(XLXN_6), 
                             .D3(XLXN_5), 
                             .Q0(XLXN_8), 
                             .Q1(XLXN_10), 
                             .Q2(XLXN_9), 
                             .Q3(XLXN_12));
   dabble_MUSER_main  XLXI_4 (.D0(B[2]), 
                             .D1(XLXN_8), 
                             .D2(XLXN_9), 
                             .D3(XLXN_10), 
                             .Q0(XLXN_22), 
                             .Q1(XLXN_19), 
                             .Q2(XLXN_20), 
                             .Q3(XLXN_18));
   dabble_MUSER_main  XLXI_5 (.D0(XLXN_12), 
                             .D1(XLXN_13), 
                             .D2(XLXN_14), 
                             .D3(XLXN_24), 
                             .Q0(XLXN_17), 
                             .Q1(XLXN_15), 
                             .Q2(XLXN_16), 
                             .Q3(H[1]));
   dabble_MUSER_main  XLXI_6 (.D0(B[1]), 
                             .D1(XLXN_22), 
                             .D2(XLXN_20), 
                             .D3(XLXN_19), 
                             .Q0(O[1]), 
                             .Q1(O[3]), 
                             .Q2(O[2]), 
                             .Q3(T[0]));
   dabble_MUSER_main  XLXI_7 (.D0(XLXN_18), 
                             .D1(XLXN_17), 
                             .D2(XLXN_16), 
                             .D3(XLXN_15), 
                             .Q0(T[1]), 
                             .Q1(T[3]), 
                             .Q2(T[2]), 
                             .Q3(H[0]));
   GND  XLXI_8 (.G(XLXN_23));
   GND  XLXI_9 (.G(XLXN_24));
   BUF  XLXI_36 (.I(B[0]), 
                .O(O[0]));
   GND  XLXI_37 (.G(H[2]));
   GND  XLXI_38 (.G(H[3]));
endmodule
`timescale 1ns / 1ps

module main(OSC, 
            SSD_COM, 
            SSD_COM2, 
            SSD_COM3, 
            SSD_p, 
            SSD_Segment);

    input OSC;
   output [1:0] SSD_COM;
   output SSD_COM2;
   output SSD_COM3;
   output SSD_p;
   output [6:0] SSD_Segment;
   
   wire [3:0] XLXN_3;
   wire [3:0] XLXN_4;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_15;
   wire XLXN_16;
   wire [7:0] XLXN_18;
   wire XLXN_19;
   
   dd8b_MUSER_main  XLXI_2 (.B(XLXN_18[7:0]), 
                           .H(), 
                           .O(XLXN_3[3:0]), 
                           .T(XLXN_4[3:0]));
   GND  XLXI_3 (.G(XLXN_16));
   ssd2d09b_MUSER_main  XLXI_4 (.D0(XLXN_3[3:0]), 
                               .D1(XLXN_4[3:0]), 
                               .ScanCLK(XLXN_9), 
                               .COM(SSD_COM[1:0]), 
                               .Segment(SSD_Segment[6:0]));
   clkdiv20M_MUSER_main  XLXI_5 (.CLK(OSC), 
                                .CLKO(XLXN_7));
   clkdiv2_MUSER_main  XLXI_6 (.CLK(XLXN_7), 
                              .CLKO(XLXN_15));
   clkdiv20k_MUSER_main  XLXI_7 (.CLK(OSC), 
                                .CLKO(XLXN_9));
   GND  XLXI_11 (.G(SSD_p));
   VCC  XLXI_12 (.P(SSD_COM2));
   VCC  XLXI_13 (.P(SSD_COM3));
   INV  XLXI_14 (.I(XLXN_15), 
                .O(XLXN_8));
   counter100  XLXI_15 (.CE(XLXN_19), 
                       .CLK(XLXN_8), 
                       .CLR(XLXN_16), 
                       .CEO(), 
                       .Q(XLXN_18[7:0]), 
                       .TC());
   VCC  XLXI_16 (.P(XLXN_19));
endmodule
