////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 09/03/2024 10:41:33
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Classes-2024/Digital System Fundamentals Shared/Labs/8/adder/main.vf" -w "D:/Classes-2024/Digital System Fundamentals Shared/Labs/8/adder/main.sch"
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module M2_1E_HXILINX_main (O, D0, D1, E, S0);
    

   output O;

   input  D0;
   input  D1;
   input  E;
   input  S0;

   reg O;

   always @ ( D0 or D1 or E or S0)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case(S0)
        1'b0 : O <= D0;
        1'b1 : O <= D1;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module COMP8_HXILINX_main (EQ, A, B);
    

   output EQ;

   input  [7:0] A;
   input  [7:0] B;

   assign EQ = (A==B) ;

endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_main (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_main (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_main(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module gnd8_MUSER_main(GND);

   output [7:0] GND;
   
   
   GND  XLXI_1 (.G(GND[0]));
   GND  XLXI_2 (.G(GND[1]));
   GND  XLXI_3 (.G(GND[2]));
   GND  XLXI_4 (.G(GND[3]));
   GND  XLXI_5 (.G(GND[4]));
   GND  XLXI_6 (.G(GND[5]));
   GND  XLXI_7 (.G(GND[6]));
   GND  XLXI_8 (.G(GND[7]));
endmodule
`timescale 1ns / 1ps

module clkdiv20k_MUSER_main(CLK, 
                            CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_11;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_41;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_21" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_10 (.C(XLXN_41), 
                 .D(XLXN_11), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_11));
   (* HU_SET = "XLXI_14_22" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_23" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_24" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_41));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module resize1x4x0l_MUSER_main(L, 
                               O);

    input L;
   output [3:0] O;
   
   
   BUF  XLXI_1 (.I(L), 
               .O(O[0]));
   GND  XLXI_35 (.G(O[3]));
   GND  XLXI_36 (.G(O[2]));
   GND  XLXI_37 (.G(O[1]));
endmodule
`timescale 1ns / 1ps

module gnd4_MUSER_main(GND);

   output [3:0] GND;
   
   
   GND  XLXI_1 (.G(GND[0]));
   GND  XLXI_2 (.G(GND[1]));
   GND  XLXI_3 (.G(GND[2]));
   GND  XLXI_4 (.G(GND[3]));
endmodule
`timescale 1ns / 1ps

module ssd4d0ftlnpb_MUSER_main(D0, 
                               D1, 
                               D2, 
                               D3, 
                               NEG, 
                               P, 
                               RBlank, 
                               ScanCLK, 
                               COM, 
                               Segment);

    input [3:0] D0;
    input [3:0] D1;
    input [3:0] D2;
    input [3:0] D3;
    input NEG;
    input [3:0] P;
    input RBlank;
    input ScanCLK;
   output [3:0] COM;
   output [7:0] Segment;
   
   wire [3:0] D;
   wire SRAW1;
   wire SRAW2;
   wire SRAW3;
   wire SRAW4;
   wire SRAW5;
   wire SRAW6;
   wire XLXN_141;
   wire XLXN_146;
   wire XLXN_152;
   wire XLXN_185;
   wire XLXN_236;
   wire XLXN_237;
   wire XLXN_238;
   wire XLXN_239;
   wire XLXN_430;
   wire XLXN_437;
   wire XLXN_438;
   wire XLXN_439;
   wire XLXN_440;
   wire XLXN_441;
   wire XLXN_442;
   wire XLXN_443;
   wire XLXN_448;
   wire XLXN_458;
   wire XLXN_468;
   wire XLXN_471;
   wire XLXN_486;
   wire XLXN_487;
   wire XLXN_488;
   wire XLXN_491;
   wire XLXN_494;
   wire XLXN_495;
   wire XLXN_544;
   wire XLXN_545;
   wire XLXN_546;
   wire XLXN_548;
   wire XLXN_550;
   wire XLXN_551;
   wire XLXN_552;
   
   LUT4 #( .INIT(16'hEF7C) ) XLXI_1 (.I0(D[0]), 
                .I1(D[1]), 
                .I2(D[2]), 
                .I3(D[3]), 
                .O(SRAW6));
   LUT4 #( .INIT(16'hDF71) ) XLXI_2 (.I0(D[0]), 
                .I1(D[1]), 
                .I2(D[2]), 
                .I3(D[3]), 
                .O(SRAW5));
   LUT4 #( .INIT(16'hFD45) ) XLXI_3 (.I0(D[0]), 
                .I1(D[1]), 
                .I2(D[2]), 
                .I3(D[3]), 
                .O(SRAW4));
   LUT4 #( .INIT(16'h7B6D) ) XLXI_4 (.I0(D[0]), 
                .I1(D[1]), 
                .I2(D[2]), 
                .I3(D[3]), 
                .O(SRAW3));
   LUT4 #( .INIT(16'h2FFB) ) XLXI_5 (.I0(D[0]), 
                .I1(D[1]), 
                .I2(D[2]), 
                .I3(D[3]), 
                .O(SRAW2));
   LUT4 #( .INIT(16'h279F) ) XLXI_6 (.I0(D[0]), 
                .I1(D[1]), 
                .I2(D[2]), 
                .I3(D[3]), 
                .O(SRAW1));
   LUT4 #( .INIT(16'hD7ED) ) XLXI_7 (.I0(D[0]), 
                .I1(D[1]), 
                .I2(D[2]), 
                .I3(D[3]), 
                .O(XLXN_430));
   GND  XLXI_119 (.G(XLXN_141));
   (* HU_SET = "XLXI_162_40" *) 
   CB2CE_HXILINX_main  XLXI_162 (.C(ScanCLK), 
                                .CE(XLXN_146), 
                                .CLR(XLXN_141), 
                                .CEO(), 
                                .Q0(XLXN_495), 
                                .Q1(XLXN_494), 
                                .TC());
   VCC  XLXI_163 (.P(XLXN_146));
   VCC  XLXI_165 (.P(XLXN_152));
   (* HU_SET = "XLXI_183_25" *) 
   M4_1E_HXILINX_main  XLXI_183 (.D0(D0[0]), 
                                .D1(D1[0]), 
                                .D2(D2[0]), 
                                .D3(D3[0]), 
                                .E(XLXN_185), 
                                .S0(XLXN_495), 
                                .S1(XLXN_494), 
                                .O(D[0]));
   (* HU_SET = "XLXI_184_26" *) 
   M4_1E_HXILINX_main  XLXI_184 (.D0(D0[1]), 
                                .D1(D1[1]), 
                                .D2(D2[1]), 
                                .D3(D3[1]), 
                                .E(XLXN_185), 
                                .S0(XLXN_495), 
                                .S1(XLXN_494), 
                                .O(D[1]));
   (* HU_SET = "XLXI_185_27" *) 
   M4_1E_HXILINX_main  XLXI_185 (.D0(D0[2]), 
                                .D1(D1[2]), 
                                .D2(D2[2]), 
                                .D3(D3[2]), 
                                .E(XLXN_185), 
                                .S0(XLXN_495), 
                                .S1(XLXN_494), 
                                .O(D[2]));
   (* HU_SET = "XLXI_186_28" *) 
   M4_1E_HXILINX_main  XLXI_186 (.D0(D0[3]), 
                                .D1(D1[3]), 
                                .D2(D2[3]), 
                                .D3(D3[3]), 
                                .E(XLXN_185), 
                                .S0(XLXN_495), 
                                .S1(XLXN_494), 
                                .O(D[3]));
   VCC  XLXI_204 (.P(XLXN_185));
   (* HU_SET = "XLXI_210_39" *) 
   D2_4E_HXILINX_main  XLXI_210 (.A0(XLXN_495), 
                                .A1(XLXN_494), 
                                .E(XLXN_152), 
                                .D0(XLXN_236), 
                                .D1(XLXN_237), 
                                .D2(XLXN_238), 
                                .D3(XLXN_239));
   INV  XLXI_211 (.I(XLXN_236), 
                 .O(COM[0]));
   INV  XLXI_212 (.I(XLXN_237), 
                 .O(COM[1]));
   INV  XLXI_213 (.I(XLXN_238), 
                 .O(COM[2]));
   INV  XLXI_214 (.I(XLXN_239), 
                 .O(COM[3]));
   (* HU_SET = "XLXI_215_29" *) 
   M4_1E_HXILINX_main  XLXI_215 (.D0(P[0]), 
                                .D1(P[1]), 
                                .D2(P[2]), 
                                .D3(P[3]), 
                                .E(XLXN_185), 
                                .S0(XLXN_495), 
                                .S1(XLXN_494), 
                                .O(Segment[7]));
   AND4B4  XLXI_249 (.I0(D3[0]), 
                    .I1(D3[1]), 
                    .I2(D3[2]), 
                    .I3(D3[3]), 
                    .O(XLXN_550));
   AND4B4  XLXI_250 (.I0(D2[0]), 
                    .I1(D2[1]), 
                    .I2(D2[2]), 
                    .I3(D2[3]), 
                    .O(XLXN_551));
   AND4B4  XLXI_251 (.I0(D1[0]), 
                    .I1(D1[1]), 
                    .I2(D1[2]), 
                    .I3(D1[3]), 
                    .O(XLXN_552));
   AND2  XLXI_257 (.I0(XLXN_471), 
                  .I1(XLXN_552), 
                  .O(XLXN_548));
   AND2  XLXI_258 (.I0(XLXN_468), 
                  .I1(XLXN_551), 
                  .O(XLXN_471));
   AND2  XLXI_259 (.I0(RBlank), 
                  .I1(XLXN_550), 
                  .O(XLXN_468));
   (* HU_SET = "XLXI_260_30" *) 
   M2_1E_HXILINX_main  XLXI_260 (.D0(XLXN_430), 
                                .D1(XLXN_437), 
                                .E(XLXN_487), 
                                .S0(XLXN_458), 
                                .O(Segment[0]));
   (* HU_SET = "XLXI_261_31" *) 
   M2_1E_HXILINX_main  XLXI_261 (.D0(SRAW1), 
                                .D1(XLXN_438), 
                                .E(XLXN_487), 
                                .S0(XLXN_458), 
                                .O(Segment[1]));
   (* HU_SET = "XLXI_262_32" *) 
   M2_1E_HXILINX_main  XLXI_262 (.D0(SRAW2), 
                                .D1(XLXN_439), 
                                .E(XLXN_487), 
                                .S0(XLXN_458), 
                                .O(Segment[2]));
   (* HU_SET = "XLXI_263_33" *) 
   M2_1E_HXILINX_main  XLXI_263 (.D0(SRAW3), 
                                .D1(XLXN_440), 
                                .E(XLXN_487), 
                                .S0(XLXN_458), 
                                .O(Segment[3]));
   (* HU_SET = "XLXI_264_34" *) 
   M2_1E_HXILINX_main  XLXI_264 (.D0(SRAW4), 
                                .D1(XLXN_441), 
                                .E(XLXN_487), 
                                .S0(XLXN_458), 
                                .O(Segment[4]));
   (* HU_SET = "XLXI_265_35" *) 
   M2_1E_HXILINX_main  XLXI_265 (.D0(SRAW5), 
                                .D1(XLXN_442), 
                                .E(XLXN_487), 
                                .S0(XLXN_458), 
                                .O(Segment[5]));
   (* HU_SET = "XLXI_266_36" *) 
   M2_1E_HXILINX_main  XLXI_266 (.D0(SRAW6), 
                                .D1(XLXN_443), 
                                .E(XLXN_487), 
                                .S0(XLXN_458), 
                                .O(Segment[6]));
   GND  XLXI_268 (.G(XLXN_437));
   GND  XLXI_270 (.G(XLXN_438));
   GND  XLXI_271 (.G(XLXN_439));
   GND  XLXI_272 (.G(XLXN_440));
   GND  XLXI_273 (.G(XLXN_441));
   GND  XLXI_274 (.G(XLXN_442));
   VCC  XLXI_276 (.P(XLXN_443));
   (* HU_SET = "XLXI_277_37" *) 
   M4_1E_HXILINX_main  XLXI_277 (.D0(XLXN_448), 
                                .D1(XLXN_548), 
                                .D2(XLXN_471), 
                                .D3(XLXN_468), 
                                .E(XLXN_491), 
                                .S0(XLXN_495), 
                                .S1(XLXN_494), 
                                .O(XLXN_488));
   GND  XLXI_278 (.G(XLXN_448));
   (* HU_SET = "XLXI_281_38" *) 
   M4_1E_HXILINX_main  XLXI_281 (.D0(XLXN_486), 
                                .D1(XLXN_544), 
                                .D2(XLXN_545), 
                                .D3(XLXN_546), 
                                .E(XLXN_491), 
                                .S0(XLXN_495), 
                                .S1(XLXN_494), 
                                .O(XLXN_458));
   GND  XLXI_285 (.G(XLXN_486));
   VCC  XLXI_287 (.P(XLXN_491));
   NAND2B1  XLXI_306 (.I0(XLXN_458), 
                     .I1(XLXN_488), 
                     .O(XLXN_487));
   AND2  XLXI_307 (.I0(NEG), 
                  .I1(XLXN_548), 
                  .O(XLXN_544));
   AND3B1  XLXI_309 (.I0(XLXN_548), 
                    .I1(XLXN_471), 
                    .I2(NEG), 
                    .O(XLXN_545));
   AND3B1  XLXI_310 (.I0(XLXN_471), 
                    .I1(XLXN_468), 
                    .I2(NEG), 
                    .O(XLXN_546));
endmodule
`timescale 1ns / 1ps

module split8x4x4_MUSER_main(I, 
                             H, 
                             L);

    input [7:0] I;
   output [3:0] H;
   output [3:0] L;
   
   
   BUF  XLXI_1 (.I(I[0]), 
               .O(L[0]));
   BUF  XLXI_2 (.I(I[1]), 
               .O(L[1]));
   BUF  XLXI_3 (.I(I[2]), 
               .O(L[2]));
   BUF  XLXI_4 (.I(I[3]), 
               .O(L[3]));
   BUF  XLXI_5 (.I(I[4]), 
               .O(H[0]));
   BUF  XLXI_6 (.I(I[5]), 
               .O(H[1]));
   BUF  XLXI_7 (.I(I[6]), 
               .O(H[2]));
   BUF  XLXI_8 (.I(I[7]), 
               .O(H[3]));
endmodule
`timescale 1ns / 1ps

module fulladder_MUSER_main(A, 
                            B, 
                            Cin, 
                            Cout, 
                            S);

    input A;
    input B;
    input Cin;
   output Cout;
   output S;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_10;
   
   XOR2  XLXI_2 (.I0(B), 
                .I1(A), 
                .O(XLXN_10));
   XOR2  XLXI_3 (.I0(Cin), 
                .I1(XLXN_10), 
                .O(S));
   AND2  XLXI_4 (.I0(B), 
                .I1(A), 
                .O(XLXN_2));
   AND2  XLXI_5 (.I0(Cin), 
                .I1(XLXN_10), 
                .O(XLXN_3));
   OR2  XLXI_6 (.I0(XLXN_2), 
               .I1(XLXN_3), 
               .O(Cout));
endmodule
`timescale 1ns / 1ps

module adder8_MUSER_main(A, 
                         B, 
                         Cin, 
                         Cout, 
                         S);

    input [7:0] A;
    input [7:0] B;
    input Cin;
   output Cout;
   output [7:0] S;
   
   wire XLXN_51;
   wire XLXN_53;
   wire XLXN_55;
   wire XLXN_57;
   wire XLXN_59;
   wire XLXN_61;
   wire XLXN_63;
   
   fulladder_MUSER_main  XLXI_46 (.A(A[0]), 
                                 .B(B[0]), 
                                 .Cin(Cin), 
                                 .Cout(XLXN_51), 
                                 .S(S[0]));
   fulladder_MUSER_main  XLXI_47 (.A(A[1]), 
                                 .B(B[1]), 
                                 .Cin(XLXN_51), 
                                 .Cout(XLXN_53), 
                                 .S(S[1]));
   fulladder_MUSER_main  XLXI_54 (.A(A[2]), 
                                 .B(B[2]), 
                                 .Cin(XLXN_53), 
                                 .Cout(XLXN_55), 
                                 .S(S[2]));
   fulladder_MUSER_main  XLXI_55 (.A(A[3]), 
                                 .B(B[3]), 
                                 .Cin(XLXN_55), 
                                 .Cout(XLXN_57), 
                                 .S(S[3]));
   fulladder_MUSER_main  XLXI_56 (.A(A[4]), 
                                 .B(B[4]), 
                                 .Cin(XLXN_57), 
                                 .Cout(XLXN_59), 
                                 .S(S[4]));
   fulladder_MUSER_main  XLXI_57 (.A(A[5]), 
                                 .B(B[5]), 
                                 .Cin(XLXN_59), 
                                 .Cout(XLXN_61), 
                                 .S(S[5]));
   fulladder_MUSER_main  XLXI_58 (.A(A[6]), 
                                 .B(B[6]), 
                                 .Cin(XLXN_61), 
                                 .Cout(XLXN_63), 
                                 .S(S[6]));
   fulladder_MUSER_main  XLXI_59 (.A(A[7]), 
                                 .B(B[7]), 
                                 .Cin(XLXN_63), 
                                 .Cout(Cout), 
                                 .S(S[7]));
endmodule
`timescale 1ns / 1ps

module main(DIP, 
            OSC, 
            SW, 
            BUZZER, 
            SSD_COM, 
            SSD_Segment);

    input [7:0] DIP;
    input OSC;
    input [7:0] SW;
   output BUZZER;
   output [3:0] SSD_COM;
   output [7:0] SSD_Segment;
   
   wire XLXN_2;
   wire XLXN_3;
   wire [7:0] XLXN_4;
   wire XLXN_7;
   wire [3:0] XLXN_8;
   wire [3:0] XLXN_9;
   wire [3:0] XLXN_10;
   wire [3:0] XLXN_11;
   wire [3:0] XLXN_12;
   wire XLXN_24;
   wire XLXN_27;
   wire [7:0] XLXN_29;
   
   GND  XLXI_2 (.G(XLXN_2));
   adder8_MUSER_main  XLXI_3 (.A(SW[7:0]), 
                             .B(DIP[7:0]), 
                             .Cin(XLXN_2), 
                             .Cout(XLXN_3), 
                             .S(XLXN_4[7:0]));
   split8x4x4_MUSER_main  XLXI_4 (.I(XLXN_4[7:0]), 
                                 .H(XLXN_11[3:0]), 
                                 .L(XLXN_12[3:0]));
   resize1x4x0l_MUSER_main  XLXI_5 (.L(XLXN_3), 
                                   .O(XLXN_10[3:0]));
   ssd4d0ftlnpb_MUSER_main  XLXI_6 (.D0(XLXN_12[3:0]), 
                                   .D1(XLXN_11[3:0]), 
                                   .D2(XLXN_10[3:0]), 
                                   .D3(XLXN_9[3:0]), 
                                   .NEG(XLXN_24), 
                                   .P(XLXN_8[3:0]), 
                                   .RBlank(XLXN_7), 
                                   .ScanCLK(XLXN_27), 
                                   .COM(SSD_COM[3:0]), 
                                   .Segment(SSD_Segment[7:0]));
   gnd4_MUSER_main  XLXI_7 (.GND(XLXN_9[3:0]));
   gnd4_MUSER_main  XLXI_8 (.GND(XLXN_8[3:0]));
   GND  XLXI_9 (.G(XLXN_24));
   VCC  XLXI_10 (.P(XLXN_7));
   clkdiv20k_MUSER_main  XLXI_19 (.CLK(OSC), 
                                 .CLKO(XLXN_27));
   (* HU_SET = "XLXI_21_41" *) 
   COMP8_HXILINX_main  XLXI_21 (.A(XLXN_4[7:0]), 
                               .B(XLXN_29[7:0]), 
                               .EQ(BUZZER));
   gnd8_MUSER_main  XLXI_22 (.GND(XLXN_29[7:0]));
endmodule
