////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 08/21/2024 21:51:48
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Personal/Projects/Digital Labs/Labs/6/random-number/main.vf" -w "D:/Personal/Projects/Digital Labs/Labs/6/random-number/main.sch"
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FJKCE_HXILINX_main(Q, C, CE, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(CE)
        begin
          if(!J)
          begin
            if(K)
            Q <= 1'b0;
          end
          else
          begin
            if(!K)
            Q <= 1'b1;
            else 
            Q <= !Q;
          end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module COMP4_HXILINX_main (EQ, A0, A1, A2, A3, B0, B1, B2, B3);
    

   output EQ;

   input A0;
   input A1;
   input A2;
   input A3;
   input B0;
   input B1;
   input B2;
   input B3;

   assign EQ = ((A0==B0) && (A1==B1) && (A2==B2) && (A3==B3)) ;

endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_main (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 1ns / 1ps

module mux2x1x4_MUSER_main(D0, 
                           D1, 
                           S, 
                           Q);

    input [3:0] D0;
    input [3:0] D1;
    input S;
   output [3:0] Q;
   
   
   (* HU_SET = "XLXI_144_0" *) 
   M2_1_HXILINX_main  XLXI_144 (.D0(D0[0]), 
                               .D1(D1[0]), 
                               .S0(S), 
                               .O(Q[0]));
   (* HU_SET = "XLXI_145_1" *) 
   M2_1_HXILINX_main  XLXI_145 (.D0(D0[1]), 
                               .D1(D1[1]), 
                               .S0(S), 
                               .O(Q[1]));
   (* HU_SET = "XLXI_146_2" *) 
   M2_1_HXILINX_main  XLXI_146 (.D0(D0[2]), 
                               .D1(D1[2]), 
                               .S0(S), 
                               .O(Q[2]));
   (* HU_SET = "XLXI_147_3" *) 
   M2_1_HXILINX_main  XLXI_147 (.D0(D0[3]), 
                               .D1(D1[3]), 
                               .S0(S), 
                               .O(Q[3]));
endmodule
`timescale 1ns / 1ps

module comp2x4_MUSER_main(D0, 
                          D1, 
                          EQ);

    input [3:0] D0;
    input [3:0] D1;
   output EQ;
   
   
   (* HU_SET = "XLXI_7_4" *) 
   COMP4_HXILINX_main  XLXI_7 (.A0(D0[0]), 
                              .A1(D0[1]), 
                              .A2(D0[2]), 
                              .A3(D0[3]), 
                              .B0(D1[0]), 
                              .B1(D1[1]), 
                              .B2(D1[2]), 
                              .B3(D1[3]), 
                              .EQ(EQ));
endmodule
`timescale 1ns / 1ps

module ssd2d09b_MUSER_main(D0, 
                           D1, 
                           ScanCLK, 
                           COM, 
                           Segment);

    input [3:0] D0;
    input [3:0] D1;
    input ScanCLK;
   output [1:0] COM;
   output [6:0] Segment;
   
   wire [3:0] DATA;
   wire XLXN_109;
   wire XLXN_111;
   wire XLXN_113;
   wire XLXN_114;
   wire XLXN_117;
   wire XLXN_118;
   wire XLXN_119;
   wire XLXN_125;
   wire XLXN_129;
   wire XLXN_130;
   wire XLXN_131;
   wire XLXN_132;
   wire XLXN_134;
   wire XLXN_135;
   wire XLXN_139;
   wire XLXN_141;
   wire [1:0] COM_DUMMY;
   wire [6:0] Segment_DUMMY;
   
   assign COM[1:0] = COM_DUMMY[1:0];
   assign Segment[6:0] = Segment_DUMMY[6:0];
   AND2  XLXI_92 (.I0(DATA[0]), 
                 .I1(DATA[1]), 
                 .O(XLXN_129));
   INV  XLXI_93 (.I(DATA[1]), 
                .O(XLXN_109));
   INV  XLXI_94 (.I(DATA[0]), 
                .O(XLXN_111));
   OR2  XLXI_95 (.I0(DATA[0]), 
                .I1(DATA[1]), 
                .O(XLXN_118));
   NOR2  XLXI_96 (.I0(DATA[2]), 
                 .I1(XLXN_109), 
                 .O(XLXN_113));
   AND2  XLXI_97 (.I0(XLXN_109), 
                 .I1(DATA[2]), 
                 .O(XLXN_114));
   AND2  XLXI_98 (.I0(DATA[2]), 
                 .I1(XLXN_111), 
                 .O(XLXN_135));
   NOR2  XLXI_99 (.I0(DATA[0]), 
                 .I1(XLXN_113), 
                 .O(XLXN_131));
   OR2  XLXI_100 (.I0(DATA[0]), 
                 .I1(XLXN_114), 
                 .O(XLXN_117));
   INV  XLXI_101 (.I(XLXN_117), 
                 .O(Segment_DUMMY[4]));
   NAND2  XLXI_102 (.I0(XLXN_117), 
                   .I1(DATA[1]), 
                   .O(XLXN_119));
   NAND3  XLXI_103 (.I0(XLXN_118), 
                   .I1(XLXN_119), 
                   .I2(DATA[2]), 
                   .O(Segment_DUMMY[1]));
   NAND3  XLXI_104 (.I0(Segment_DUMMY[1]), 
                   .I1(DATA[1]), 
                   .I2(Segment_DUMMY[4]), 
                   .O(Segment_DUMMY[2]));
   NOR2  XLXI_105 (.I0(XLXN_111), 
                  .I1(Segment_DUMMY[1]), 
                  .O(XLXN_125));
   OR2  XLXI_106 (.I0(XLXN_125), 
                 .I1(DATA[3]), 
                 .O(XLXN_130));
   OR2  XLXI_107 (.I0(XLXN_113), 
                 .I1(XLXN_130), 
                 .O(XLXN_134));
   NOR2  XLXI_108 (.I0(XLXN_129), 
                  .I1(XLXN_130), 
                  .O(XLXN_132));
   OR2  XLXI_109 (.I0(XLXN_135), 
                 .I1(XLXN_134), 
                 .O(Segment_DUMMY[6]));
   OR2  XLXI_110 (.I0(Segment_DUMMY[4]), 
                 .I1(XLXN_134), 
                 .O(Segment_DUMMY[3]));
   NAND2  XLXI_111 (.I0(XLXN_132), 
                   .I1(XLXN_117), 
                   .O(Segment_DUMMY[0]));
   OR2  XLXI_112 (.I0(XLXN_131), 
                 .I1(XLXN_130), 
                 .O(Segment_DUMMY[5]));
   (* HU_SET = "XLXI_117_9" *) 
   FJKC_HXILINX_main  XLXI_117 (.C(ScanCLK), 
                               .CLR(XLXN_141), 
                               .J(XLXN_139), 
                               .K(XLXN_139), 
                               .Q(COM_DUMMY[0]));
   VCC  XLXI_118 (.P(XLXN_139));
   GND  XLXI_119 (.G(XLXN_141));
   INV  XLXI_156 (.I(COM_DUMMY[0]), 
                 .O(COM_DUMMY[1]));
   (* HU_SET = "XLXI_158_5" *) 
   M2_1_HXILINX_main  XLXI_158 (.D0(D0[0]), 
                               .D1(D1[0]), 
                               .S0(COM_DUMMY[0]), 
                               .O(DATA[0]));
   (* HU_SET = "XLXI_159_6" *) 
   M2_1_HXILINX_main  XLXI_159 (.D0(D0[1]), 
                               .D1(D1[1]), 
                               .S0(COM_DUMMY[0]), 
                               .O(DATA[1]));
   (* HU_SET = "XLXI_160_7" *) 
   M2_1_HXILINX_main  XLXI_160 (.D0(D0[2]), 
                               .D1(D1[2]), 
                               .S0(COM_DUMMY[0]), 
                               .O(DATA[2]));
   (* HU_SET = "XLXI_161_8" *) 
   M2_1_HXILINX_main  XLXI_161 (.D0(D0[3]), 
                               .D1(D1[3]), 
                               .S0(COM_DUMMY[0]), 
                               .O(DATA[3]));
endmodule
`timescale 1ns / 1ps

module counter10x4c_MUSER_main(CE, 
                               CLK, 
                               CLR, 
                               CEO, 
                               Q0, 
                               Q1, 
                               Q2, 
                               Q3, 
                               TC);

    input CE;
    input CLK;
    input CLR;
   output CEO;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   output TC;
   
   wire XLXN_1;
   wire XLXN_6;
   wire XLXN_10;
   wire XLXN_16;
   wire Q0_DUMMY;
   wire Q1_DUMMY;
   wire Q2_DUMMY;
   wire Q3_DUMMY;
   wire TC_DUMMY;
   
   assign Q0 = Q0_DUMMY;
   assign Q1 = Q1_DUMMY;
   assign Q2 = Q2_DUMMY;
   assign Q3 = Q3_DUMMY;
   assign TC = TC_DUMMY;
   VCC  XLXI_5 (.P(XLXN_1));
   AND2B1  XLXI_6 (.I0(Q3_DUMMY), 
                  .I1(Q0_DUMMY), 
                  .O(XLXN_6));
   AND2  XLXI_7 (.I0(Q0_DUMMY), 
                .I1(Q1_DUMMY), 
                .O(XLXN_10));
   AND3  XLXI_8 (.I0(Q2_DUMMY), 
                .I1(Q1_DUMMY), 
                .I2(Q0_DUMMY), 
                .O(XLXN_16));
   AND4B2  XLXI_9 (.I0(Q1_DUMMY), 
                  .I1(Q2_DUMMY), 
                  .I2(Q0_DUMMY), 
                  .I3(Q3_DUMMY), 
                  .O(TC_DUMMY));
   AND2  XLXI_10 (.I0(CE), 
                 .I1(TC_DUMMY), 
                 .O(CEO));
   (* HU_SET = "XLXI_11_10" *) 
   FJKCE_HXILINX_main  XLXI_11 (.C(CLK), 
                               .CE(CE), 
                               .CLR(CLR), 
                               .J(XLXN_1), 
                               .K(XLXN_1), 
                               .Q(Q0_DUMMY));
   (* HU_SET = "XLXI_12_11" *) 
   FJKCE_HXILINX_main  XLXI_12 (.C(CLK), 
                               .CE(CE), 
                               .CLR(CLR), 
                               .J(XLXN_6), 
                               .K(Q0_DUMMY), 
                               .Q(Q1_DUMMY));
   (* HU_SET = "XLXI_13_12" *) 
   FJKCE_HXILINX_main  XLXI_13 (.C(CLK), 
                               .CE(CE), 
                               .CLR(CLR), 
                               .J(XLXN_10), 
                               .K(XLXN_10), 
                               .Q(Q2_DUMMY));
   (* HU_SET = "XLXI_14_13" *) 
   FJKCE_HXILINX_main  XLXI_14 (.C(CLK), 
                               .CE(CE), 
                               .CLR(CLR), 
                               .J(XLXN_16), 
                               .K(Q0_DUMMY), 
                               .Q(Q3_DUMMY));
endmodule
`timescale 1ns / 1ps

module clkdiv10_MUSER_main(CLK, 
                           CLKO);

    input CLK;
   output CLKO;
   
   wire XLXN_18;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_123;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_14" *) 
   FJKC_HXILINX_main  XLXI_1 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_35), 
                             .K(XLXN_36), 
                             .Q(XLXN_30));
   (* HU_SET = "XLXI_2_15" *) 
   FJKC_HXILINX_main  XLXI_2 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_30), 
                             .K(XLXN_34), 
                             .Q(XLXN_33));
   (* HU_SET = "XLXI_3_16" *) 
   FJKC_HXILINX_main  XLXI_3 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_29), 
                             .K(XLXN_28), 
                             .Q(XLXN_34));
   GND  XLXI_15 (.G(XLXN_18));
   VCC  XLXI_20 (.P(XLXN_28));
   INV  XLXI_21 (.I(XLXN_30), 
                .O(XLXN_29));
   AND2B1  XLXI_22 (.I0(XLXN_33), 
                   .I1(XLXN_34), 
                   .O(XLXN_35));
   VCC  XLXI_23 (.P(XLXN_36));
   FD_1 #( .INIT(1'b0) ) XLXI_24 (.C(CLK), 
                 .D(XLXN_33), 
                 .Q(XLXN_38));
   OR2  XLXI_25 (.I0(XLXN_38), 
                .I1(XLXN_33), 
                .O(XLXN_123));
   FD_1 #( .INIT(1'b0) ) XLXI_26 (.C(XLXN_123), 
                 .D(XLXN_39), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_27 (.I(CLKO_DUMMY), 
                .O(XLXN_39));
endmodule
`timescale 1ns / 1ps

module clkdiv20k_MUSER_main(CLK, 
                            CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_11;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_41;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_17" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_10 (.C(XLXN_41), 
                 .D(XLXN_11), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_11));
   (* HU_SET = "XLXI_14_18" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_19" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_20" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_41));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module main(BTN3, 
            OSC, 
            LED, 
            SSD_COM, 
            SSD_Segment);

    input BTN3;
    input OSC;
   output [3:0] LED;
   output [1:0] SSD_COM;
   output [6:0] SSD_Segment;
   
   wire CLK_1kHz;
   wire CLK_100Hz;
   wire [3:0] D0;
   wire [3:0] D1;
   wire [3:0] One;
   wire [3:0] rLED;
   wire XLXN_1;
   wire XLXN_8;
   wire XLXN_33;
   wire XLXN_34;
   wire [3:0] XLXN_36;
   wire [3:0] Zero;
   
   clkdiv20k_MUSER_main  XLXI_1 (.CLK(OSC), 
                                .CLKO(CLK_1kHz));
   clkdiv10_MUSER_main  XLXI_2 (.CLK(CLK_1kHz), 
                               .CLKO(CLK_100Hz));
   counter10x4c_MUSER_main  XLXI_5 (.CE(BTN3), 
                                   .CLK(CLK_100Hz), 
                                   .CLR(XLXN_8), 
                                   .CEO(XLXN_1), 
                                   .Q0(D0[0]), 
                                   .Q1(D0[1]), 
                                   .Q2(D0[2]), 
                                   .Q3(D0[3]), 
                                   .TC());
   counter10x4c_MUSER_main  XLXI_6 (.CE(XLXN_1), 
                                   .CLK(CLK_100Hz), 
                                   .CLR(XLXN_8), 
                                   .CEO(), 
                                   .Q0(D1[0]), 
                                   .Q1(D1[1]), 
                                   .Q2(D1[2]), 
                                   .Q3(D1[3]), 
                                   .TC());
   GND  XLXI_9 (.G(XLXN_8));
   ssd2d09b_MUSER_main  XLXI_10 (.D0(D0[3:0]), 
                                .D1(D1[3:0]), 
                                .ScanCLK(CLK_1kHz), 
                                .COM(SSD_COM[1:0]), 
                                .Segment(SSD_Segment[6:0]));
   comp2x4_MUSER_main  XLXI_11 (.D0(D0[3:0]), 
                               .D1(D1[3:0]), 
                               .EQ(XLXN_33));
   comp2x4_MUSER_main  XLXI_12 (.D0(D1[3:0]), 
                               .D1(Zero[3:0]), 
                               .EQ(XLXN_34));
   GND  XLXI_13 (.G(Zero[0]));
   GND  XLXI_14 (.G(Zero[1]));
   GND  XLXI_15 (.G(Zero[2]));
   GND  XLXI_16 (.G(Zero[3]));
   mux2x1x4_MUSER_main  XLXI_17 (.D0(Zero[3:0]), 
                                .D1(XLXN_36[3:0]), 
                                .S(XLXN_33), 
                                .Q(rLED[3:0]));
   mux2x1x4_MUSER_main  XLXI_18 (.D0(D1[3:0]), 
                                .D1(One[3:0]), 
                                .S(XLXN_34), 
                                .Q(XLXN_36[3:0]));
   VCC  XLXI_19 (.P(One[0]));
   VCC  XLXI_20 (.P(One[1]));
   VCC  XLXI_21 (.P(One[2]));
   VCC  XLXI_22 (.P(One[3]));
   mux2x1x4_MUSER_main  XLXI_24 (.D0(rLED[3:0]), 
                                .D1(Zero[3:0]), 
                                .S(BTN3), 
                                .Q(LED[3:0]));
endmodule
