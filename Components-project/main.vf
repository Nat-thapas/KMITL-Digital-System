////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 08/19/2024 01:53:51
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/Personal/Projects/Digital Labs/Components-project/main.vf" -w "D:/Personal/Projects/Digital Labs/Components-project/main.sch"
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module CB16CE_HXILINX_main(CEO, Q, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 16'b1111_1111_1111_1111;
   
   output             CEO;
   output [15:0]      Q;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg    [15:0]      Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = (Q == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_main (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_main (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_main (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_main(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module dabble_MUSER_main(D0, 
                         D1, 
                         D2, 
                         D3, 
                         Q0, 
                         Q1, 
                         Q2, 
                         Q3);

    input D0;
    input D1;
    input D2;
    input D3;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_19;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_30;
   wire Q0_DUMMY;
   
   assign Q0 = Q0_DUMMY;
   INV  XLXI_1 (.I(D2), 
               .O(XLXN_13));
   NOR2  XLXI_2 (.I0(D3), 
                .I1(D2), 
                .O(XLXN_25));
   AND2  XLXI_3 (.I0(D2), 
                .I1(D1), 
                .O(XLXN_15));
   INV  XLXI_4 (.I(D0), 
               .O(XLXN_14));
   NOR2  XLXI_25 (.I0(XLXN_13), 
                 .I1(D1), 
                 .O(XLXN_19));
   NAND2  XLXI_26 (.I0(XLXN_14), 
                  .I1(D2), 
                  .O(XLXN_23));
   OR2  XLXI_27 (.I0(XLXN_15), 
                .I1(D3), 
                .O(XLXN_24));
   NAND2  XLXI_28 (.I0(D3), 
                  .I1(XLXN_14), 
                  .O(XLXN_26));
   (* HU_SET = "XLXI_37_0" *) 
   M2_1_HXILINX_main  XLXI_37 (.D0(XLXN_19), 
                              .D1(D3), 
                              .S0(D0), 
                              .O(Q1));
   NAND2  XLXI_38 (.I0(XLXN_23), 
                  .I1(D1), 
                  .O(XLXN_27));
   (* HU_SET = "XLXI_39_1" *) 
   M2_1_HXILINX_main  XLXI_39 (.D0(XLXN_24), 
                              .D1(XLXN_25), 
                              .S0(D0), 
                              .O(Q0_DUMMY));
   INV  XLXI_40 (.I(Q0_DUMMY), 
                .O(XLXN_30));
   NAND2  XLXI_41 (.I0(XLXN_26), 
                  .I1(XLXN_27), 
                  .O(Q2));
   (* HU_SET = "XLXI_42_2" *) 
   M2_1_HXILINX_main  XLXI_42 (.D0(Q0_DUMMY), 
                              .D1(XLXN_30), 
                              .S0(D0), 
                              .O(Q3));
endmodule
`timescale 1ns / 1ps

module dd16b_MUSER_main(B, 
                        H, 
                        K, 
                        O, 
                        T, 
                        TK);

    input [15:0] B;
   output [3:0] H;
   output [3:0] K;
   output [3:0] O;
   output [3:0] T;
   output [3:0] TK;
   
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_68;
   wire XLXN_69;
   wire XLXN_70;
   wire XLXN_71;
   wire XLXN_72;
   wire XLXN_73;
   wire XLXN_74;
   wire XLXN_75;
   wire XLXN_76;
   wire XLXN_77;
   wire XLXN_78;
   wire XLXN_79;
   wire XLXN_80;
   wire XLXN_81;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_84;
   wire XLXN_85;
   wire XLXN_86;
   wire XLXN_87;
   wire XLXN_88;
   wire XLXN_89;
   wire XLXN_90;
   wire XLXN_91;
   wire XLXN_92;
   wire XLXN_93;
   wire XLXN_94;
   wire XLXN_95;
   wire XLXN_96;
   wire XLXN_97;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_102;
   wire XLXN_103;
   wire XLXN_104;
   wire XLXN_105;
   wire XLXN_106;
   wire XLXN_107;
   wire XLXN_108;
   wire XLXN_109;
   wire XLXN_110;
   wire XLXN_111;
   wire XLXN_112;
   wire XLXN_113;
   wire XLXN_114;
   wire XLXN_115;
   wire XLXN_116;
   wire XLXN_117;
   wire XLXN_118;
   wire XLXN_119;
   wire XLXN_120;
   wire XLXN_121;
   wire XLXN_124;
   wire XLXN_125;
   wire XLXN_126;
   wire XLXN_127;
   wire XLXN_128;
   wire XLXN_129;
   wire XLXN_130;
   wire XLXN_131;
   wire XLXN_134;
   wire XLXN_135;
   wire XLXN_137;
   wire XLXN_139;
   
   dabble_MUSER_main  XLXI_1 (.D0(B[1]), 
                             .D1(XLXN_4), 
                             .D2(XLXN_5), 
                             .D3(XLXN_6), 
                             .Q0(O[1]), 
                             .Q1(O[3]), 
                             .Q2(O[2]), 
                             .Q3(T[0]));
   dabble_MUSER_main  XLXI_2 (.D0(B[2]), 
                             .D1(XLXN_38), 
                             .D2(XLXN_37), 
                             .D3(XLXN_36), 
                             .Q0(XLXN_4), 
                             .Q1(XLXN_6), 
                             .Q2(XLXN_5), 
                             .Q3(XLXN_7));
   dabble_MUSER_main  XLXI_3 (.D0(B[3]), 
                             .D1(XLXN_39), 
                             .D2(XLXN_40), 
                             .D3(XLXN_41), 
                             .Q0(XLXN_38), 
                             .Q1(XLXN_36), 
                             .Q2(XLXN_37), 
                             .Q3(XLXN_35));
   dabble_MUSER_main  XLXI_4 (.D0(B[4]), 
                             .D1(XLXN_48), 
                             .D2(XLXN_55), 
                             .D3(XLXN_56), 
                             .Q0(XLXN_39), 
                             .Q1(XLXN_41), 
                             .Q2(XLXN_40), 
                             .Q3(XLXN_42));
   dabble_MUSER_main  XLXI_5 (.D0(B[5]), 
                             .D1(XLXN_69), 
                             .D2(XLXN_70), 
                             .D3(XLXN_71), 
                             .Q0(XLXN_48), 
                             .Q1(XLXN_56), 
                             .Q2(XLXN_55), 
                             .Q3(XLXN_57));
   dabble_MUSER_main  XLXI_6 (.D0(B[6]), 
                             .D1(XLXN_81), 
                             .D2(XLXN_82), 
                             .D3(XLXN_83), 
                             .Q0(XLXN_69), 
                             .Q1(XLXN_71), 
                             .Q2(XLXN_70), 
                             .Q3(XLXN_72));
   dabble_MUSER_main  XLXI_7 (.D0(B[7]), 
                             .D1(XLXN_92), 
                             .D2(XLXN_93), 
                             .D3(XLXN_94), 
                             .Q0(XLXN_81), 
                             .Q1(XLXN_83), 
                             .Q2(XLXN_82), 
                             .Q3(XLXN_84));
   dabble_MUSER_main  XLXI_8 (.D0(B[8]), 
                             .D1(XLXN_103), 
                             .D2(XLXN_104), 
                             .D3(XLXN_105), 
                             .Q0(XLXN_92), 
                             .Q1(XLXN_94), 
                             .Q2(XLXN_93), 
                             .Q3(XLXN_95));
   dabble_MUSER_main  XLXI_9 (.D0(B[9]), 
                             .D1(XLXN_111), 
                             .D2(XLXN_112), 
                             .D3(XLXN_113), 
                             .Q0(XLXN_103), 
                             .Q1(XLXN_105), 
                             .Q2(XLXN_104), 
                             .Q3(XLXN_106));
   dabble_MUSER_main  XLXI_10 (.D0(B[10]), 
                              .D1(XLXN_118), 
                              .D2(XLXN_119), 
                              .D3(XLXN_120), 
                              .Q0(XLXN_111), 
                              .Q1(XLXN_113), 
                              .Q2(XLXN_112), 
                              .Q3(XLXN_114));
   dabble_MUSER_main  XLXI_11 (.D0(B[11]), 
                              .D1(XLXN_125), 
                              .D2(XLXN_126), 
                              .D3(XLXN_127), 
                              .Q0(XLXN_118), 
                              .Q1(XLXN_120), 
                              .Q2(XLXN_119), 
                              .Q3(XLXN_121));
   dabble_MUSER_main  XLXI_12 (.D0(B[12]), 
                              .D1(XLXN_129), 
                              .D2(XLXN_130), 
                              .D3(XLXN_131), 
                              .Q0(XLXN_125), 
                              .Q1(XLXN_127), 
                              .Q2(XLXN_126), 
                              .Q3(XLXN_128));
   dabble_MUSER_main  XLXI_13 (.D0(B[13]), 
                              .D1(B[14]), 
                              .D2(B[15]), 
                              .D3(XLXN_134), 
                              .Q0(XLXN_129), 
                              .Q1(XLXN_131), 
                              .Q2(XLXN_130), 
                              .Q3(XLXN_135));
   dabble_MUSER_main  XLXI_16 (.D0(XLXN_7), 
                              .D1(XLXN_8), 
                              .D2(XLXN_9), 
                              .D3(XLXN_10), 
                              .Q0(T[1]), 
                              .Q1(T[3]), 
                              .Q2(T[2]), 
                              .Q3(H[0]));
   dabble_MUSER_main  XLXI_17 (.D0(XLXN_35), 
                              .D1(XLXN_34), 
                              .D2(XLXN_33), 
                              .D3(XLXN_32), 
                              .Q0(XLXN_8), 
                              .Q1(XLXN_10), 
                              .Q2(XLXN_9), 
                              .Q3(XLXN_11));
   dabble_MUSER_main  XLXI_18 (.D0(XLXN_42), 
                              .D1(XLXN_43), 
                              .D2(XLXN_44), 
                              .D3(XLXN_45), 
                              .Q0(XLXN_34), 
                              .Q1(XLXN_32), 
                              .Q2(XLXN_33), 
                              .Q3(XLXN_31));
   dabble_MUSER_main  XLXI_19 (.D0(XLXN_57), 
                              .D1(XLXN_58), 
                              .D2(XLXN_59), 
                              .D3(XLXN_60), 
                              .Q0(XLXN_43), 
                              .Q1(XLXN_45), 
                              .Q2(XLXN_44), 
                              .Q3(XLXN_46));
   dabble_MUSER_main  XLXI_20 (.D0(XLXN_72), 
                              .D1(XLXN_73), 
                              .D2(XLXN_74), 
                              .D3(XLXN_75), 
                              .Q0(XLXN_58), 
                              .Q1(XLXN_60), 
                              .Q2(XLXN_59), 
                              .Q3(XLXN_61));
   dabble_MUSER_main  XLXI_21 (.D0(XLXN_84), 
                              .D1(XLXN_85), 
                              .D2(XLXN_86), 
                              .D3(XLXN_87), 
                              .Q0(XLXN_73), 
                              .Q1(XLXN_75), 
                              .Q2(XLXN_74), 
                              .Q3(XLXN_76));
   dabble_MUSER_main  XLXI_22 (.D0(XLXN_95), 
                              .D1(XLXN_96), 
                              .D2(XLXN_97), 
                              .D3(XLXN_98), 
                              .Q0(XLXN_85), 
                              .Q1(XLXN_87), 
                              .Q2(XLXN_86), 
                              .Q3(XLXN_88));
   dabble_MUSER_main  XLXI_23 (.D0(XLXN_106), 
                              .D1(XLXN_107), 
                              .D2(XLXN_108), 
                              .D3(XLXN_109), 
                              .Q0(XLXN_96), 
                              .Q1(XLXN_98), 
                              .Q2(XLXN_97), 
                              .Q3(XLXN_99));
   dabble_MUSER_main  XLXI_24 (.D0(XLXN_114), 
                              .D1(XLXN_115), 
                              .D2(XLXN_116), 
                              .D3(XLXN_117), 
                              .Q0(XLXN_107), 
                              .Q1(XLXN_109), 
                              .Q2(XLXN_108), 
                              .Q3(XLXN_110));
   dabble_MUSER_main  XLXI_25 (.D0(XLXN_121), 
                              .D1(XLXN_128), 
                              .D2(XLXN_135), 
                              .D3(XLXN_124), 
                              .Q0(XLXN_115), 
                              .Q1(XLXN_117), 
                              .Q2(XLXN_116), 
                              .Q3(XLXN_137));
   dabble_MUSER_main  XLXI_31 (.D0(XLXN_99), 
                              .D1(XLXN_110), 
                              .D2(XLXN_137), 
                              .D3(XLXN_102), 
                              .Q0(XLXN_89), 
                              .Q1(XLXN_91), 
                              .Q2(XLXN_90), 
                              .Q3(XLXN_139));
   dabble_MUSER_main  XLXI_32 (.D0(XLXN_88), 
                              .D1(XLXN_89), 
                              .D2(XLXN_90), 
                              .D3(XLXN_91), 
                              .Q0(XLXN_77), 
                              .Q1(XLXN_79), 
                              .Q2(XLXN_78), 
                              .Q3(XLXN_80));
   dabble_MUSER_main  XLXI_33 (.D0(XLXN_76), 
                              .D1(XLXN_77), 
                              .D2(XLXN_78), 
                              .D3(XLXN_79), 
                              .Q0(XLXN_62), 
                              .Q1(XLXN_64), 
                              .Q2(XLXN_63), 
                              .Q3(XLXN_65));
   dabble_MUSER_main  XLXI_34 (.D0(XLXN_61), 
                              .D1(XLXN_62), 
                              .D2(XLXN_63), 
                              .D3(XLXN_64), 
                              .Q0(XLXN_47), 
                              .Q1(XLXN_50), 
                              .Q2(XLXN_49), 
                              .Q3(XLXN_51));
   dabble_MUSER_main  XLXI_35 (.D0(XLXN_46), 
                              .D1(XLXN_47), 
                              .D2(XLXN_49), 
                              .D3(XLXN_50), 
                              .Q0(XLXN_30), 
                              .Q1(XLXN_28), 
                              .Q2(XLXN_29), 
                              .Q3(XLXN_27));
   dabble_MUSER_main  XLXI_36 (.D0(XLXN_31), 
                              .D1(XLXN_30), 
                              .D2(XLXN_29), 
                              .D3(XLXN_28), 
                              .Q0(XLXN_12), 
                              .Q1(XLXN_14), 
                              .Q2(XLXN_13), 
                              .Q3(XLXN_15));
   dabble_MUSER_main  XLXI_37 (.D0(XLXN_11), 
                              .D1(XLXN_12), 
                              .D2(XLXN_13), 
                              .D3(XLXN_14), 
                              .Q0(H[1]), 
                              .Q1(H[3]), 
                              .Q2(H[2]), 
                              .Q3(K[0]));
   dabble_MUSER_main  XLXI_38 (.D0(XLXN_15), 
                              .D1(XLXN_16), 
                              .D2(XLXN_17), 
                              .D3(XLXN_18), 
                              .Q0(K[1]), 
                              .Q1(K[3]), 
                              .Q2(K[2]), 
                              .Q3(TK[0]));
   dabble_MUSER_main  XLXI_39 (.D0(XLXN_27), 
                              .D1(XLXN_26), 
                              .D2(XLXN_25), 
                              .D3(XLXN_24), 
                              .Q0(XLXN_16), 
                              .Q1(XLXN_18), 
                              .Q2(XLXN_17), 
                              .Q3(TK[1]));
   dabble_MUSER_main  XLXI_40 (.D0(XLXN_51), 
                              .D1(XLXN_52), 
                              .D2(XLXN_53), 
                              .D3(XLXN_54), 
                              .Q0(XLXN_26), 
                              .Q1(XLXN_24), 
                              .Q2(XLXN_25), 
                              .Q3(TK[2]));
   dabble_MUSER_main  XLXI_41 (.D0(XLXN_65), 
                              .D1(XLXN_80), 
                              .D2(XLXN_139), 
                              .D3(XLXN_68), 
                              .Q0(XLXN_52), 
                              .Q1(XLXN_54), 
                              .Q2(XLXN_53), 
                              .Q3(TK[3]));
   GND  XLXI_188 (.G(XLXN_134));
   GND  XLXI_189 (.G(XLXN_124));
   GND  XLXI_190 (.G(XLXN_102));
   GND  XLXI_191 (.G(XLXN_68));
   BUF  XLXI_313 (.I(B[0]), 
                 .O(O[0]));
endmodule
`timescale 1ns / 1ps

module clkdiv5_MUSER_main(CLK, 
                          CLKO);

    input CLK;
   output CLKO;
   
   wire XLXN_18;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_38;
   
   (* HU_SET = "XLXI_6_5" *) 
   FJKC_HXILINX_main  XLXI_6 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_29), 
                             .K(XLXN_28), 
                             .Q(XLXN_34));
   (* HU_SET = "XLXI_7_3" *) 
   FJKC_HXILINX_main  XLXI_7 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_35), 
                             .K(XLXN_36), 
                             .Q(XLXN_30));
   (* HU_SET = "XLXI_8_4" *) 
   FJKC_HXILINX_main  XLXI_8 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_30), 
                             .K(XLXN_34), 
                             .Q(XLXN_33));
   GND  XLXI_15 (.G(XLXN_18));
   VCC  XLXI_20 (.P(XLXN_28));
   INV  XLXI_21 (.I(XLXN_30), 
                .O(XLXN_29));
   AND2B1  XLXI_22 (.I0(XLXN_33), 
                   .I1(XLXN_34), 
                   .O(XLXN_35));
   VCC  XLXI_23 (.P(XLXN_36));
   FD_1 #( .INIT(1'b0) ) XLXI_24 (.C(CLK), 
                 .D(XLXN_33), 
                 .Q(XLXN_38));
   OR2  XLXI_25 (.I0(XLXN_38), 
                .I1(XLXN_33), 
                .O(CLKO));
endmodule
`timescale 1ns / 1ps

module clkdiv20k_MUSER_main(CLK, 
                            CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_11;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_41;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_6" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_10 (.C(XLXN_41), 
                 .D(XLXN_11), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_11));
   (* HU_SET = "XLXI_14_7" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_8" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_9" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_41));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module ssd4d0fbp_MUSER_main(D0, 
                            D1, 
                            D2, 
                            D3, 
                            P, 
                            ScanCLK, 
                            COM, 
                            Segment);

    input [3:0] D0;
    input [3:0] D1;
    input [3:0] D2;
    input [3:0] D3;
    input [3:0] P;
    input ScanCLK;
   output [3:0] COM;
   output [7:0] Segment;
   
   wire [3:0] DATA;
   wire XLXN_7;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_36;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_65;
   wire XLXN_84;
   wire XLXN_90;
   wire XLXN_91;
   wire XLXN_141;
   wire XLXN_146;
   wire XLXN_152;
   wire XLXN_185;
   wire XLXN_195;
   wire XLXN_199;
   wire XLXN_236;
   wire XLXN_237;
   wire XLXN_238;
   wire XLXN_239;
   wire XLXN_247;
   wire [7:0] Segment_DUMMY;
   
   assign Segment[7:0] = Segment_DUMMY[7:0];
   INV  XLXI_1 (.I(DATA[3]), 
               .O(XLXN_12));
   INV  XLXI_2 (.I(DATA[2]), 
               .O(XLXN_10));
   OR2  XLXI_3 (.I0(DATA[2]), 
               .I1(DATA[1]), 
               .O(XLXN_29));
   INV  XLXI_4 (.I(DATA[0]), 
               .O(XLXN_9));
   INV  XLXI_5 (.I(DATA[1]), 
               .O(XLXN_39));
   OR2  XLXI_6 (.I0(DATA[3]), 
               .I1(DATA[0]), 
               .O(XLXN_7));
   AND4  XLXI_7 (.I0(DATA[0]), 
                .I1(DATA[3]), 
                .I2(DATA[1]), 
                .I3(XLXN_10), 
                .O(XLXN_25));
   OR2  XLXI_8 (.I0(XLXN_29), 
               .I1(DATA[0]), 
               .O(XLXN_42));
   OR2  XLXI_9 (.I0(DATA[1]), 
               .I1(XLXN_9), 
               .O(XLXN_20));
   AND2  XLXI_10 (.I0(XLXN_29), 
                 .I1(DATA[0]), 
                 .O(XLXN_13));
   NAND2  XLXI_11 (.I0(DATA[2]), 
                  .I1(XLXN_7), 
                  .O(XLXN_14));
   AND2  XLXI_12 (.I0(XLXN_9), 
                 .I1(DATA[1]), 
                 .O(XLXN_15));
   NAND2  XLXI_13 (.I0(XLXN_29), 
                  .I1(DATA[3]), 
                  .O(XLXN_50));
   AND2  XLXI_14 (.I0(XLXN_10), 
                 .I1(XLXN_29), 
                 .O(XLXN_16));
   OR3  XLXI_15 (.I0(DATA[2]), 
                .I1(DATA[0]), 
                .I2(XLXN_12), 
                .O(XLXN_11));
   NAND2  XLXI_16 (.I0(XLXN_11), 
                  .I1(XLXN_9), 
                  .O(XLXN_17));
   NAND2  XLXI_17 (.I0(XLXN_10), 
                  .I1(XLXN_11), 
                  .O(XLXN_18));
   OR3  XLXI_18 (.I0(DATA[3]), 
                .I1(XLXN_10), 
                .I2(XLXN_20), 
                .O(XLXN_44));
   OR3  XLXI_19 (.I0(XLXN_20), 
                .I1(XLXN_10), 
                .I2(XLXN_12), 
                .O(XLXN_22));
   OR2  XLXI_63 (.I0(DATA[3]), 
                .I1(XLXN_13), 
                .O(XLXN_21));
   NAND2  XLXI_64 (.I0(XLXN_14), 
                  .I1(XLXN_29), 
                  .O(XLXN_45));
   OR2  XLXI_65 (.I0(DATA[3]), 
                .I1(XLXN_15), 
                .O(XLXN_23));
   OR2  XLXI_66 (.I0(DATA[0]), 
                .I1(XLXN_16), 
                .O(XLXN_38));
   NAND2  XLXI_67 (.I0(XLXN_29), 
                  .I1(XLXN_17), 
                  .O(XLXN_46));
   NAND2  XLXI_68 (.I0(XLXN_18), 
                  .I1(XLXN_20), 
                  .O(XLXN_26));
   NAND2  XLXI_69 (.I0(DATA[3]), 
                  .I1(XLXN_22), 
                  .O(XLXN_36));
   AND2  XLXI_70 (.I0(XLXN_21), 
                 .I1(XLXN_22), 
                 .O(XLXN_30));
   NAND2  XLXI_71 (.I0(XLXN_23), 
                  .I1(XLXN_20), 
                  .O(XLXN_31));
   OR2  XLXI_72 (.I0(DATA[2]), 
                .I1(XLXN_25), 
                .O(XLXN_33));
   NAND2  XLXI_73 (.I0(XLXN_29), 
                  .I1(XLXN_26), 
                  .O(XLXN_84));
   NOR2  XLXI_74 (.I0(DATA[1]), 
                 .I1(XLXN_30), 
                 .O(XLXN_32));
   NAND2  XLXI_75 (.I0(XLXN_44), 
                  .I1(XLXN_31), 
                  .O(XLXN_34));
   NAND2  XLXI_76 (.I0(XLXN_33), 
                  .I1(XLXN_34), 
                  .O(Segment_DUMMY[1]));
   OR2  XLXI_77 (.I0(XLXN_32), 
                .I1(XLXN_25), 
                .O(XLXN_65));
   NAND3  XLXI_78 (.I0(XLXN_38), 
                  .I1(XLXN_36), 
                  .I2(Segment_DUMMY[1]), 
                  .O(Segment_DUMMY[5]));
   NAND2  XLXI_79 (.I0(Segment_DUMMY[1]), 
                  .I1(DATA[3]), 
                  .O(XLXN_40));
   OR2  XLXI_80 (.I0(Segment_DUMMY[1]), 
                .I1(XLXN_39), 
                .O(XLXN_41));
   NAND2  XLXI_81 (.I0(XLXN_42), 
                  .I1(XLXN_65), 
                  .O(Segment_DUMMY[0]));
   NAND2  XLXI_82 (.I0(Segment_DUMMY[5]), 
                  .I1(XLXN_12), 
                  .O(XLXN_90));
   AND4  XLXI_83 (.I0(XLXN_40), 
                 .I1(XLXN_41), 
                 .I2(XLXN_44), 
                 .I3(XLXN_45), 
                 .O(XLXN_47));
   NAND2  XLXI_84 (.I0(Segment_DUMMY[0]), 
                  .I1(XLXN_46), 
                  .O(XLXN_48));
   NAND2  XLXI_85 (.I0(Segment_DUMMY[0]), 
                  .I1(XLXN_9), 
                  .O(XLXN_51));
   INV  XLXI_86 (.I(XLXN_47), 
                .O(Segment_DUMMY[6]));
   NAND2  XLXI_87 (.I0(XLXN_48), 
                  .I1(XLXN_84), 
                  .O(Segment_DUMMY[3]));
   NAND2  XLXI_88 (.I0(XLXN_51), 
                  .I1(XLXN_50), 
                  .O(Segment_DUMMY[4]));
   NAND2  XLXI_89 (.I0(DATA[0]), 
                  .I1(Segment_DUMMY[3]), 
                  .O(XLXN_52));
   AND4  XLXI_90 (.I0(Segment_DUMMY[4]), 
                 .I1(XLXN_52), 
                 .I2(XLXN_11), 
                 .I3(XLXN_90), 
                 .O(XLXN_91));
   INV  XLXI_91 (.I(XLXN_91), 
                .O(Segment_DUMMY[2]));
   GND  XLXI_119 (.G(XLXN_141));
   (* HU_SET = "XLXI_162_14" *) 
   CB2CE_HXILINX_main  XLXI_162 (.C(ScanCLK), 
                                .CE(XLXN_146), 
                                .CLR(XLXN_141), 
                                .CEO(), 
                                .Q0(XLXN_195), 
                                .Q1(XLXN_199), 
                                .TC());
   VCC  XLXI_163 (.P(XLXN_146));
   VCC  XLXI_165 (.P(XLXN_152));
   (* HU_SET = "XLXI_183_10" *) 
   M4_1E_HXILINX_main  XLXI_183 (.D0(D0[0]), 
                                .D1(D1[0]), 
                                .D2(D2[0]), 
                                .D3(D3[0]), 
                                .E(XLXN_185), 
                                .S0(XLXN_195), 
                                .S1(XLXN_199), 
                                .O(DATA[0]));
   (* HU_SET = "XLXI_184_11" *) 
   M4_1E_HXILINX_main  XLXI_184 (.D0(D0[1]), 
                                .D1(D1[1]), 
                                .D2(D2[1]), 
                                .D3(D3[1]), 
                                .E(XLXN_185), 
                                .S0(XLXN_195), 
                                .S1(XLXN_199), 
                                .O(DATA[1]));
   (* HU_SET = "XLXI_185_12" *) 
   M4_1E_HXILINX_main  XLXI_185 (.D0(D0[2]), 
                                .D1(D1[2]), 
                                .D2(D2[2]), 
                                .D3(D3[2]), 
                                .E(XLXN_185), 
                                .S0(XLXN_195), 
                                .S1(XLXN_199), 
                                .O(DATA[2]));
   (* HU_SET = "XLXI_186_13" *) 
   M4_1E_HXILINX_main  XLXI_186 (.D0(D0[3]), 
                                .D1(D1[3]), 
                                .D2(D2[3]), 
                                .D3(D3[3]), 
                                .E(XLXN_185), 
                                .S0(XLXN_195), 
                                .S1(XLXN_199), 
                                .O(DATA[3]));
   VCC  XLXI_204 (.P(XLXN_185));
   (* HU_SET = "XLXI_210_15" *) 
   D2_4E_HXILINX_main  XLXI_210 (.A0(XLXN_195), 
                                .A1(XLXN_199), 
                                .E(XLXN_152), 
                                .D0(XLXN_236), 
                                .D1(XLXN_237), 
                                .D2(XLXN_238), 
                                .D3(XLXN_239));
   INV  XLXI_211 (.I(XLXN_236), 
                 .O(COM[0]));
   INV  XLXI_212 (.I(XLXN_237), 
                 .O(COM[1]));
   INV  XLXI_213 (.I(XLXN_238), 
                 .O(COM[2]));
   INV  XLXI_214 (.I(XLXN_239), 
                 .O(COM[3]));
   (* HU_SET = "XLXI_215_16" *) 
   M4_1E_HXILINX_main  XLXI_215 (.D0(P[0]), 
                                .D1(P[1]), 
                                .D2(P[2]), 
                                .D3(P[3]), 
                                .E(XLXN_247), 
                                .S0(XLXN_195), 
                                .S1(XLXN_199), 
                                .O(Segment_DUMMY[7]));
   VCC  XLXI_216 (.P(XLXN_247));
endmodule
`timescale 1ns / 1ps

module clkdiv200k_MUSER_main(CLK, 
                             CLKO);

    input CLK;
   output CLKO;
   
   wire CLK_I;
   wire XLXN_3;
   wire XLXN_9;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_27;
   wire XLXN_37;
   wire XLXN_44;
   wire XLXN_48;
   wire CLKO_DUMMY;
   
   assign CLKO = CLKO_DUMMY;
   (* HU_SET = "XLXI_1_17" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_I), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_15), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_3));
   GND  XLXI_3 (.G(XLXN_15));
   FD_1 #( .INIT(1'b0) ) XLXI_10 (.C(XLXN_48), 
                 .D(XLXN_9), 
                 .Q(CLKO_DUMMY));
   INV  XLXI_11 (.I(CLKO_DUMMY), 
                .O(XLXN_9));
   (* HU_SET = "XLXI_14_18" *) 
   CD4CE_HXILINX_main  XLXI_14 (.C(CLK_I), 
                               .CE(XLXN_14), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_27), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_17_19" *) 
   CD4CE_HXILINX_main  XLXI_17 (.C(CLK_I), 
                               .CE(XLXN_27), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_37), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_22_20" *) 
   CD4CE_HXILINX_main  XLXI_22 (.C(CLK_I), 
                               .CE(XLXN_37), 
                               .CLR(XLXN_15), 
                               .CEO(XLXN_44), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_25_21" *) 
   CD4CE_HXILINX_main  XLXI_25 (.C(CLK_I), 
                               .CE(XLXN_44), 
                               .CLR(XLXN_15), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_48));
   INV  XLXI_34 (.I(CLK), 
                .O(CLK_I));
endmodule
`timescale 1ns / 1ps

module main(OSC, 
            SW0, 
            SW1, 
            SW2, 
            SW3, 
            LED0, 
            LED1, 
            LED2, 
            LED3, 
            SSD_a, 
            SSD_b, 
            SSD_c, 
            SSD_COM0, 
            SSD_COM1, 
            SSD_COM2, 
            SSD_COM3, 
            SSD_d, 
            SSD_e, 
            SSD_f, 
            SSD_g, 
            SSD_p);

    input OSC;
    input SW0;
    input SW1;
    input SW2;
    input SW3;
   output LED0;
   output LED1;
   output LED2;
   output LED3;
   output SSD_a;
   output SSD_b;
   output SSD_c;
   output SSD_COM0;
   output SSD_COM1;
   output SSD_COM2;
   output SSD_COM3;
   output SSD_d;
   output SSD_e;
   output SSD_f;
   output SSD_g;
   output SSD_p;
   
   wire [3:0] COM;
   wire [3:0] P;
   wire [7:0] Segment;
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire [15:0] XLXN_4;
   wire [3:0] XLXN_5;
   wire [3:0] XLXN_6;
   wire [3:0] XLXN_7;
   wire [3:0] XLXN_8;
   wire XLXN_10;
   wire XLXN_13;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   
   clkdiv200k_MUSER_main  XLXI_2 (.CLK(OSC), 
                                 .CLKO(XLXN_1));
   (* HU_SET = "XLXI_3_22" *) 
   CB16CE_HXILINX_main  XLXI_3 (.C(XLXN_1), 
                               .CE(XLXN_2), 
                               .CLR(XLXN_3), 
                               .CEO(), 
                               .Q(XLXN_4[15:0]), 
                               .TC());
   VCC  XLXI_4 (.P(XLXN_2));
   GND  XLXI_5 (.G(XLXN_3));
   ssd4d0fbp_MUSER_main  XLXI_7 (.D0(XLXN_5[3:0]), 
                                .D1(XLXN_6[3:0]), 
                                .D2(XLXN_7[3:0]), 
                                .D3(XLXN_8[3:0]), 
                                .P(P[3:0]), 
                                .ScanCLK(XLXN_10), 
                                .COM(COM[3:0]), 
                                .Segment(Segment[7:0]));
   clkdiv20k_MUSER_main  XLXI_8 (.CLK(OSC), 
                                .CLKO(XLXN_10));
   clkdiv5_MUSER_main  XLXI_9 (.CLK(XLXN_1), 
                              .CLKO(XLXN_13));
   clkdiv5_MUSER_main  XLXI_10 (.CLK(XLXN_13), 
                               .CLKO(XLXN_15));
   (* HU_SET = "XLXI_12_23" *) 
   CB2CE_HXILINX_main  XLXI_12 (.C(XLXN_15), 
                               .CE(XLXN_17), 
                               .CLR(XLXN_16), 
                               .CEO(), 
                               .Q0(XLXN_18), 
                               .Q1(XLXN_19), 
                               .TC());
   VCC  XLXI_13 (.P(XLXN_17));
   GND  XLXI_14 (.G(XLXN_16));
   (* HU_SET = "XLXI_15_24" *) 
   D2_4E_HXILINX_main  XLXI_15 (.A0(XLXN_18), 
                               .A1(XLXN_19), 
                               .E(XLXN_20), 
                               .D0(P[0]), 
                               .D1(P[1]), 
                               .D2(P[2]), 
                               .D3(P[3]));
   VCC  XLXI_16 (.P(XLXN_20));
   BUF  XLXI_17 (.I(Segment[0]), 
                .O(SSD_a));
   BUF  XLXI_18 (.I(Segment[1]), 
                .O(SSD_b));
   BUF  XLXI_19 (.I(Segment[2]), 
                .O(SSD_c));
   BUF  XLXI_20 (.I(Segment[3]), 
                .O(SSD_d));
   BUF  XLXI_21 (.I(Segment[4]), 
                .O(SSD_e));
   BUF  XLXI_22 (.I(Segment[5]), 
                .O(SSD_f));
   BUF  XLXI_23 (.I(Segment[6]), 
                .O(SSD_g));
   BUF  XLXI_24 (.I(Segment[7]), 
                .O(SSD_p));
   BUF  XLXI_25 (.I(COM[0]), 
                .O(SSD_COM0));
   BUF  XLXI_26 (.I(COM[1]), 
                .O(SSD_COM1));
   BUF  XLXI_27 (.I(COM[2]), 
                .O(SSD_COM2));
   BUF  XLXI_28 (.I(COM[3]), 
                .O(SSD_COM3));
   dabble_MUSER_main  XLXI_29 (.D0(SW0), 
                              .D1(SW1), 
                              .D2(SW2), 
                              .D3(SW3), 
                              .Q0(LED0), 
                              .Q1(LED2), 
                              .Q2(LED1), 
                              .Q3(LED3));
   dd16b_MUSER_main  XLXI_30 (.B(XLXN_4[15:0]), 
                             .H(XLXN_7[3:0]), 
                             .K(XLXN_8[3:0]), 
                             .O(XLXN_5[3:0]), 
                             .T(XLXN_6[3:0]), 
                             .TK());
endmodule
